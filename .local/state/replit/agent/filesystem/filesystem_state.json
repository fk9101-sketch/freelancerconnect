{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Freelancer Connect - Local Service Hiring App\n\n## Overview\n\nFreelancer Connect is a comprehensive full-stack web application designed to connect local customers with independent service providers (freelancers) such as electricians, plumbers, carpenters, and other skilled professionals. The platform serves three distinct user roles: customers who need services, freelancers who provide services, and administrators who manage the platform.\n\nThe application features a modern mobile-first design with real-time notifications, subscription management, lead distribution, and a comprehensive admin dashboard. It's built as a Progressive Web App (PWA) optimized for mobile devices while maintaining full desktop compatibility.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management with caching and synchronization\n- **UI Components**: Radix UI primitives with shadcn/ui component system for accessibility and consistency\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Form Handling**: React Hook Form with Zod validation for robust form management\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework for RESTful API endpoints\n- **Database ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Real-time Communication**: WebSocket integration for live notifications and updates\n- **Session Management**: Express sessions with PostgreSQL store for persistent user sessions\n- **Authentication**: Replit Authentication with OIDC integration\n- **File Structure**: Monorepo structure with shared schema between client and server\n\n### Database Design\n- **Primary Database**: PostgreSQL with Neon serverless configuration\n- **Schema Management**: Centralized schema definitions using Drizzle ORM with TypeScript\n- **Key Entities**:\n  - Users with role-based access (customer, freelancer, admin)\n  - Categories for service types\n  - Freelancer profiles with verification status and badges\n  - Leads with status tracking and interest management\n  - Subscriptions for premium features (lead access, position ranking, badges)\n  - Lead interests for non-subscribers to express interest\n- **Relationships**: Well-defined foreign key relationships with proper indexing for performance\n\n### Authentication & Authorization\n- **Primary Auth**: Firebase Authentication with Google OAuth and Phone number authentication\n- **Google Sign-in**: Full account selection interface with proper Gmail integration\n- **Phone Authentication**: SMS-based OTP verification with reCAPTCHA protection\n- **Session Strategy**: Firebase Auth state management with real-time user monitoring\n- **Role Management**: Dynamic role assignment after initial authentication\n- **Security Features**: Firebase security rules, reCAPTCHA verification, and secure token handling\n\n### Real-time Features\n- **WebSocket Server**: Custom WebSocket implementation for real-time notifications\n- **Client Management**: Connection mapping for user-specific message delivery\n- **Notification Types**: New lead alerts, subscription updates, and system announcements\n- **Reconnection Logic**: Automatic reconnection with exponential backoff for reliability\n\n### Subscription System\n- **Lead Plan**: Access to browse and accept available leads\n- **Position Plan**: Priority positioning in freelancer search results\n- **Badge Plan**: Verified or trusted badges for enhanced credibility\n- **Payment Integration**: Razorpay SDK ready for payment processing (configured but not implemented)\n\n### Mobile-First Design\n- **Responsive Layout**: Tailwind CSS breakpoints optimized for mobile devices\n- **Navigation**: Bottom navigation bar following mobile app conventions\n- **Touch Interactions**: Optimized button sizes and touch targets\n- **Performance**: Lazy loading and code splitting for optimal mobile performance\n\n## External Dependencies\n\n### Development & Build Tools\n- **Vite**: Fast build tool with React plugin and development server\n- **TypeScript**: Static type checking and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n- **PostCSS & Autoprefixer**: CSS processing and vendor prefixing\n\n### Database & ORM\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Drizzle ORM**: Type-safe database toolkit with migration support\n- **Drizzle Kit**: Database introspection and migration management\n\n### UI & Styling\n- **Radix UI**: Headless component primitives for accessibility\n- **shadcn/ui**: Pre-built component system based on Radix UI\n- **Tailwind CSS**: Utility-first CSS framework with custom theming\n- **Lucide React**: Icon library for consistent iconography\n- **Font Awesome**: Additional icon system for service categories\n\n### State Management & Data Fetching\n- **TanStack Query**: Server state management with caching and synchronization\n- **React Hook Form**: Form state management and validation\n- **Zod**: Schema validation for forms and API data\n\n### Real-time & Communication\n- **WebSocket (ws)**: WebSocket server implementation for real-time features\n- **Socket connection management**: Custom client-side WebSocket handling\n\n### Authentication & Security\n- **Replit Authentication**: OIDC-based authentication system\n- **OpenID Connect**: Standard authentication protocol implementation\n- **Express Session**: Session management with PostgreSQL store\n- **Passport.js**: Authentication middleware for Express\n\n### Utilities & Helpers\n- **date-fns**: Date manipulation and formatting\n- **class-variance-authority**: Utility for conditional CSS classes\n- **clsx & tailwind-merge**: CSS class manipulation and merging\n- **nanoid**: Unique ID generation for various entities\n- **memoizee**: Function memoization for performance optimization\n\nThe application is designed to scale horizontally with its serverless database architecture and can be easily deployed on platforms like Replit, Vercel, or similar cloud providers.","size_bytes":6285},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          light: \"var(--primary-light)\",\n          lighter: \"var(--primary-lighter)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        success: \"var(--success)\",\n        warning: \"var(--warning)\",\n        error: \"var(--error)\",\n        surface: \"var(--surface)\",\n        \"on-surface\": \"var(--on-surface)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"slide-in-right\": {\n          from: {\n            transform: \"translateX(100%)\",\n            opacity: \"0\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n            opacity: \"1\",\n          },\n        },\n        \"fade-in-up\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"slide-in-right\": \"slide-in-right 0.3s ease-out\",\n        \"fade-in-up\": \"fade-in-up 0.3s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3603},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    console.log(`Setting up strategy for domain: ${domain}`);\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n    console.log(`Strategy registered: replitauth:${domain}`);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    console.log(`Login request for hostname: ${req.hostname}`);\n    console.log(`Available strategies:`, passport._strategies);\n    \n    // Try to authenticate with the strategy for this hostname\n    const strategyName = `replitauth:${req.hostname}`;\n    console.log(`Attempting to use strategy: ${strategyName}`);\n    \n    if (!passport._strategy(strategyName)) {\n      console.error(`Strategy ${strategyName} not found`);\n      return res.status(500).json({ error: `Authentication strategy not configured for ${req.hostname}` });\n    }\n    \n    passport.authenticate(strategyName, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    console.log(`Callback request for hostname: ${req.hostname}`);\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4929},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { insertLeadSchema, insertFreelancerProfileSchema, insertSubscriptionSchema, insertLeadInterestSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // WebSocket server for real-time notifications\n  const httpServer = createServer(app);\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const connectedClients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws, req) => {\n    // Extract user ID from query params or handle auth here\n    const userId = new URL(req.url!, `http://${req.headers.host}`).searchParams.get('userId');\n    \n    if (userId) {\n      connectedClients.set(userId, ws);\n      \n      ws.on('close', () => {\n        connectedClients.delete(userId);\n      });\n    }\n  });\n\n  // Broadcast notification to specific user\n  const notifyUser = (userId: string, data: any) => {\n    const client = connectedClients.get(userId);\n    if (client && client.readyState === WebSocket.OPEN) {\n      client.send(JSON.stringify(data));\n    }\n  };\n\n  // Auth routes\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Role selection\n  app.post('/api/auth/select-role', isAuthenticated, async (req: any, res) => {\n    try {\n      const { role } = req.body;\n      const userId = req.user.claims.sub;\n      \n      if (!['customer', 'freelancer', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      await storage.updateUserRole(userId, role);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating role:\", error);\n      res.status(500).json({ message: \"Failed to update role\" });\n    }\n  });\n\n  // Categories\n  app.get('/api/categories', async (req, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ message: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Freelancer profile routes\n  app.get('/api/freelancer/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error fetching freelancer profile:\", error);\n      res.status(500).json({ message: \"Failed to fetch profile\" });\n    }\n  });\n\n  app.post('/api/freelancer/profile', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profileData = insertFreelancerProfileSchema.parse({\n        ...req.body,\n        userId\n      });\n      \n      const profile = await storage.createFreelancerProfile(profileData);\n      res.json(profile);\n    } catch (error) {\n      console.error(\"Error creating freelancer profile:\", error);\n      res.status(500).json({ message: \"Failed to create profile\" });\n    }\n  });\n\n  app.get('/api/freelancer/leads/available', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      const leads = await storage.getAvailableLeads(profile.id);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching available leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get('/api/freelancer/leads/accepted', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      const leads = await storage.getLeadsByFreelancer(profile.id);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching accepted leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.post('/api/freelancer/leads/:leadId/accept', isAuthenticated, async (req: any, res) => {\n    try {\n      const { leadId } = req.params;\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      // Check if freelancer has active lead plan\n      const hasLeadPlan = await storage.hasActiveLeadPlan(profile.id);\n      if (!hasLeadPlan) {\n        return res.status(403).json({ message: \"Active lead plan required to accept leads\" });\n      }\n      \n      await storage.acceptLead(leadId, profile.id);\n      \n      // Get lead details to notify customer\n      const lead = await storage.getLeadById(leadId);\n      if (lead) {\n        notifyUser(lead.customerId, {\n          type: 'lead_accepted',\n          leadId,\n          freelancer: profile\n        });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error accepting lead:\", error);\n      res.status(500).json({ message: \"Failed to accept lead\" });\n    }\n  });\n\n  app.post('/api/freelancer/leads/:leadId/interest', isAuthenticated, async (req: any, res) => {\n    try {\n      const { leadId } = req.params;\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      const interest = await storage.expressInterest({\n        leadId,\n        freelancerId: profile.id\n      });\n      \n      res.json(interest);\n    } catch (error) {\n      console.error(\"Error expressing interest:\", error);\n      res.status(500).json({ message: \"Failed to express interest\" });\n    }\n  });\n\n  // Customer routes\n  app.get('/api/customer/leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leads = await storage.getLeadsByCustomer(userId);\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching customer leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.post('/api/customer/leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const leadData = insertLeadSchema.parse({\n        ...req.body,\n        customerId: userId\n      });\n      \n      const lead = await storage.createLead(leadData);\n      \n      // Notify relevant freelancers\n      const freelancers = await storage.getFreelancersByCategory(leadData.categoryId, leadData.pincode || '');\n      for (const freelancer of freelancers) {\n        notifyUser(freelancer.userId, {\n          type: 'new_lead',\n          lead: { ...lead, category: freelancer.category }\n        });\n      }\n      \n      res.json(lead);\n    } catch (error) {\n      console.error(\"Error creating lead:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.get('/api/customer/freelancers', async (req, res) => {\n    try {\n      const { categoryId, area } = req.query;\n      \n      if (!categoryId) {\n        return res.status(400).json({ message: \"Category ID is required\" });\n      }\n      \n      // Get freelancers with position plans first, then regular freelancers\n      const positionFreelancers = area ? \n        await storage.getPositionPlanFreelancers(categoryId as string, area as string) : [];\n      const regularFreelancers = await storage.getFreelancersByCategory(categoryId as string, area as string);\n      \n      // Remove duplicates and maintain position order\n      const freelancerMap = new Map();\n      \n      // Add position plan freelancers first\n      positionFreelancers.forEach(f => freelancerMap.set(f.id, f));\n      \n      // Add regular freelancers\n      regularFreelancers.forEach(f => {\n        if (!freelancerMap.has(f.id)) {\n          freelancerMap.set(f.id, f);\n        }\n      });\n      \n      const allFreelancers = Array.from(freelancerMap.values());\n      res.json(allFreelancers);\n    } catch (error) {\n      console.error(\"Error fetching freelancers:\", error);\n      res.status(500).json({ message: \"Failed to fetch freelancers\" });\n    }\n  });\n\n  // Subscription routes\n  app.get('/api/freelancer/subscriptions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      const subscriptions = await storage.getActiveSubscriptions(profile.id);\n      res.json(subscriptions);\n    } catch (error) {\n      console.error(\"Error fetching subscriptions:\", error);\n      res.status(500).json({ message: \"Failed to fetch subscriptions\" });\n    }\n  });\n\n  app.post('/api/freelancer/subscriptions', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const profile = await storage.getFreelancerProfile(userId);\n      \n      if (!profile) {\n        return res.status(404).json({ message: \"Freelancer profile not found\" });\n      }\n      \n      const subscriptionData = insertSubscriptionSchema.parse({\n        ...req.body,\n        freelancerId: profile.id\n      });\n      \n      const subscription = await storage.createSubscription(subscriptionData);\n      res.json(subscription);\n    } catch (error) {\n      console.error(\"Error creating subscription:\", error);\n      res.status(500).json({ message: \"Failed to create subscription\" });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/users', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get('/api/admin/leads', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const leads = await storage.getAllLeads();\n      res.json(leads);\n    } catch (error) {\n      console.error(\"Error fetching leads:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.get('/api/admin/verifications/pending', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const pendingVerifications = await storage.getPendingVerifications();\n      res.json(pendingVerifications);\n    } catch (error) {\n      console.error(\"Error fetching pending verifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch verifications\" });\n    }\n  });\n\n  app.post('/api/admin/verifications/:freelancerId/:status', isAuthenticated, async (req: any, res) => {\n    try {\n      const user = await storage.getUser(req.user.claims.sub);\n      if (user?.role !== 'admin') {\n        return res.status(403).json({ message: \"Admin access required\" });\n      }\n      \n      const { freelancerId, status } = req.params;\n      \n      if (!['approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"Invalid status\" });\n      }\n      \n      await storage.updateVerificationStatus(freelancerId, status as 'approved' | 'rejected');\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating verification status:\", error);\n      res.status(500).json({ message: \"Failed to update verification\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":12830},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  freelancerProfiles,\n  leads,\n  subscriptions,\n  leadInterests,\n  type User,\n  type UpsertUser,\n  type Category,\n  type InsertCategory,\n  type FreelancerProfile,\n  type InsertFreelancerProfile,\n  type Lead,\n  type InsertLead,\n  type Subscription,\n  type InsertSubscription,\n  type LeadInterest,\n  type InsertLeadInterest,\n  type LeadWithRelations,\n  type FreelancerWithRelations,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, inArray, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  updateUserRole(id: string, role: 'customer' | 'freelancer' | 'admin'): Promise<void>;\n  \n  // Category operations\n  getCategories(): Promise<Category[]>;\n  createCategory(category: InsertCategory): Promise<Category>;\n  \n  // Freelancer operations\n  getFreelancerProfile(userId: string): Promise<FreelancerProfile | undefined>;\n  createFreelancerProfile(profile: InsertFreelancerProfile): Promise<FreelancerProfile>;\n  updateFreelancerProfile(id: string, updates: Partial<FreelancerProfile>): Promise<void>;\n  getFreelancersByCategory(categoryId: string, area?: string): Promise<FreelancerWithRelations[]>;\n  updateFreelancerOnlineStatus(freelancerId: string, isOnline: boolean): Promise<void>;\n  \n  // Lead operations\n  createLead(lead: InsertLead): Promise<Lead>;\n  getLeadsByFreelancer(freelancerId: string): Promise<LeadWithRelations[]>;\n  getLeadsByCustomer(customerId: string): Promise<LeadWithRelations[]>;\n  getAvailableLeads(freelancerId: string): Promise<LeadWithRelations[]>;\n  acceptLead(leadId: string, freelancerId: string): Promise<void>;\n  getLeadById(id: string): Promise<LeadWithRelations | undefined>;\n  \n  // Subscription operations\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  getActiveSubscriptions(freelancerId: string): Promise<Subscription[]>;\n  hasActiveLeadPlan(freelancerId: string): Promise<boolean>;\n  getPositionPlanFreelancers(categoryId: string, area: string): Promise<FreelancerWithRelations[]>;\n  \n  // Lead interest operations\n  expressInterest(leadInterest: InsertLeadInterest): Promise<LeadInterest>;\n  getLeadInterests(leadId: string): Promise<LeadInterest[]>;\n  \n  // Admin operations\n  getPendingVerifications(): Promise<FreelancerWithRelations[]>;\n  updateVerificationStatus(freelancerId: string, status: 'approved' | 'rejected'): Promise<void>;\n  getAllUsers(): Promise<User[]>;\n  getAllLeads(): Promise<LeadWithRelations[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  async updateUserRole(id: string, role: 'customer' | 'freelancer' | 'admin'): Promise<void> {\n    await db.update(users).set({ role, updatedAt: new Date() }).where(eq(users.id, id));\n  }\n\n  // Category operations\n  async getCategories(): Promise<Category[]> {\n    return await db.select().from(categories).where(eq(categories.isActive, true)).orderBy(asc(categories.name));\n  }\n\n  async createCategory(category: InsertCategory): Promise<Category> {\n    const [newCategory] = await db.insert(categories).values(category).returning();\n    return newCategory;\n  }\n\n  // Freelancer operations\n  async getFreelancerProfile(userId: string): Promise<FreelancerProfile | undefined> {\n    const [profile] = await db.select().from(freelancerProfiles).where(eq(freelancerProfiles.userId, userId));\n    return profile;\n  }\n\n  async createFreelancerProfile(profile: InsertFreelancerProfile): Promise<FreelancerProfile> {\n    const [newProfile] = await db.insert(freelancerProfiles).values(profile).returning();\n    return newProfile;\n  }\n\n  async updateFreelancerProfile(id: string, updates: Partial<FreelancerProfile>): Promise<void> {\n    await db.update(freelancerProfiles).set({ ...updates, updatedAt: new Date() }).where(eq(freelancerProfiles.id, id));\n  }\n\n  async getFreelancersByCategory(categoryId: string, area?: string): Promise<FreelancerWithRelations[]> {\n    const query = db\n      .select()\n      .from(freelancerProfiles)\n      .leftJoin(users, eq(freelancerProfiles.userId, users.id))\n      .leftJoin(categories, eq(freelancerProfiles.categoryId, categories.id))\n      .leftJoin(subscriptions, eq(freelancerProfiles.id, subscriptions.freelancerId))\n      .where(\n        and(\n          eq(freelancerProfiles.categoryId, categoryId),\n          eq(freelancerProfiles.verificationStatus, 'approved'),\n          area ? sql`${area} = ANY(${freelancerProfiles.workingAreas})` : undefined\n        )\n      )\n      .orderBy(desc(freelancerProfiles.rating));\n\n    const results = await query;\n    \n    // Transform results to match FreelancerWithRelations type\n    const freelancersMap = new Map<string, FreelancerWithRelations>();\n    \n    for (const row of results) {\n      const freelancerId = row.freelancer_profiles.id;\n      if (!freelancersMap.has(freelancerId)) {\n        freelancersMap.set(freelancerId, {\n          ...row.freelancer_profiles,\n          user: row.users!,\n          category: row.categories!,\n          subscriptions: []\n        });\n      }\n      \n      if (row.subscriptions) {\n        freelancersMap.get(freelancerId)!.subscriptions.push(row.subscriptions);\n      }\n    }\n    \n    return Array.from(freelancersMap.values());\n  }\n\n  async updateFreelancerOnlineStatus(freelancerId: string, isOnline: boolean): Promise<void> {\n    await db.update(freelancerProfiles).set({ \n      isOnline, \n      lastSeen: new Date(),\n      updatedAt: new Date() \n    }).where(eq(freelancerProfiles.id, freelancerId));\n  }\n\n  // Lead operations\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values(lead).returning();\n    return newLead;\n  }\n\n  async getLeadsByFreelancer(freelancerId: string): Promise<LeadWithRelations[]> {\n    const results = await db\n      .select()\n      .from(leads)\n      .leftJoin(users, eq(leads.customerId, users.id))\n      .leftJoin(categories, eq(leads.categoryId, categories.id))\n      .leftJoin(freelancerProfiles, eq(leads.acceptedBy, freelancerProfiles.id))\n      .where(eq(leads.acceptedBy, freelancerId))\n      .orderBy(desc(leads.createdAt));\n\n    return results.map(row => ({\n      ...row.leads,\n      customer: row.users!,\n      category: row.categories!,\n      acceptedByFreelancer: row.freelancer_profiles ? {\n        ...row.freelancer_profiles,\n        user: row.users!,\n        category: row.categories!,\n        subscriptions: []\n      } : undefined\n    }));\n  }\n\n  async getLeadsByCustomer(customerId: string): Promise<LeadWithRelations[]> {\n    const results = await db\n      .select()\n      .from(leads)\n      .leftJoin(users, eq(leads.customerId, users.id))\n      .leftJoin(categories, eq(leads.categoryId, categories.id))\n      .leftJoin(freelancerProfiles, eq(leads.acceptedBy, freelancerProfiles.id))\n      .where(eq(leads.customerId, customerId))\n      .orderBy(desc(leads.createdAt));\n\n    return results.map(row => ({\n      ...row.leads,\n      customer: row.users!,\n      category: row.categories!,\n      acceptedByFreelancer: row.freelancer_profiles ? {\n        ...row.freelancer_profiles,\n        user: row.users!,\n        category: row.categories!,\n        subscriptions: []\n      } : undefined\n    }));\n  }\n\n  async getAvailableLeads(freelancerId: string): Promise<LeadWithRelations[]> {\n    // Get freelancer's profile to determine category and working areas\n    const [freelancer] = await db\n      .select()\n      .from(freelancerProfiles)\n      .where(eq(freelancerProfiles.id, freelancerId));\n\n    if (!freelancer) return [];\n\n    const results = await db\n      .select()\n      .from(leads)\n      .leftJoin(users, eq(leads.customerId, users.id))\n      .leftJoin(categories, eq(leads.categoryId, categories.id))\n      .where(\n        and(\n          eq(leads.status, 'pending'),\n          eq(leads.categoryId, freelancer.categoryId),\n          freelancer.workingAreas ? sql`${leads.pincode} = ANY(${freelancer.workingAreas}) OR ${leads.location} = ANY(${freelancer.workingAreas})` : undefined\n        )\n      )\n      .orderBy(desc(leads.createdAt));\n\n    return results.map(row => ({\n      ...row.leads,\n      customer: row.users!,\n      category: row.categories!\n    }));\n  }\n\n  async acceptLead(leadId: string, freelancerId: string): Promise<void> {\n    await db.update(leads).set({ \n      acceptedBy: freelancerId, \n      acceptedAt: new Date(),\n      status: 'accepted',\n      updatedAt: new Date()\n    }).where(eq(leads.id, leadId));\n  }\n\n  async getLeadById(id: string): Promise<LeadWithRelations | undefined> {\n    const [result] = await db\n      .select()\n      .from(leads)\n      .leftJoin(users, eq(leads.customerId, users.id))\n      .leftJoin(categories, eq(leads.categoryId, categories.id))\n      .leftJoin(freelancerProfiles, eq(leads.acceptedBy, freelancerProfiles.id))\n      .where(eq(leads.id, id));\n\n    if (!result) return undefined;\n\n    return {\n      ...result.leads,\n      customer: result.users!,\n      category: result.categories!,\n      acceptedByFreelancer: result.freelancer_profiles ? {\n        ...result.freelancer_profiles,\n        user: result.users!,\n        subscriptions: []\n      } : undefined\n    };\n  }\n\n  // Subscription operations\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const [newSubscription] = await db.insert(subscriptions).values(subscription).returning();\n    return newSubscription;\n  }\n\n  async getActiveSubscriptions(freelancerId: string): Promise<Subscription[]> {\n    return await db\n      .select()\n      .from(subscriptions)\n      .where(\n        and(\n          eq(subscriptions.freelancerId, freelancerId),\n          eq(subscriptions.status, 'active'),\n          sql`${subscriptions.endDate} > NOW()`\n        )\n      );\n  }\n\n  async hasActiveLeadPlan(freelancerId: string): Promise<boolean> {\n    const [result] = await db\n      .select({ count: sql<number>`count(*)` })\n      .from(subscriptions)\n      .where(\n        and(\n          eq(subscriptions.freelancerId, freelancerId),\n          eq(subscriptions.type, 'lead'),\n          eq(subscriptions.status, 'active'),\n          sql`${subscriptions.endDate} > NOW()`\n        )\n      );\n\n    return (result?.count || 0) > 0;\n  }\n\n  async getPositionPlanFreelancers(categoryId: string, area: string): Promise<FreelancerWithRelations[]> {\n    const results = await db\n      .select()\n      .from(freelancerProfiles)\n      .leftJoin(users, eq(freelancerProfiles.userId, users.id))\n      .leftJoin(categories, eq(freelancerProfiles.categoryId, categories.id))\n      .leftJoin(subscriptions, and(\n        eq(freelancerProfiles.id, subscriptions.freelancerId),\n        eq(subscriptions.type, 'position'),\n        eq(subscriptions.status, 'active'),\n        eq(subscriptions.categoryId, categoryId),\n        eq(subscriptions.area, area),\n        sql`${subscriptions.endDate} > NOW()`\n      ))\n      .where(\n        and(\n          eq(freelancerProfiles.categoryId, categoryId),\n          eq(freelancerProfiles.verificationStatus, 'approved'),\n          sql`${area} = ANY(${freelancerProfiles.workingAreas})`\n        )\n      )\n      .orderBy(asc(subscriptions.position));\n\n    const freelancersMap = new Map<string, FreelancerWithRelations>();\n    \n    for (const row of results) {\n      const freelancerId = row.freelancer_profiles.id;\n      if (!freelancersMap.has(freelancerId)) {\n        freelancersMap.set(freelancerId, {\n          ...row.freelancer_profiles,\n          user: row.users!,\n          category: row.categories!,\n          subscriptions: []\n        });\n      }\n      \n      if (row.subscriptions) {\n        freelancersMap.get(freelancerId)!.subscriptions.push(row.subscriptions);\n      }\n    }\n    \n    return Array.from(freelancersMap.values());\n  }\n\n  // Lead interest operations\n  async expressInterest(leadInterest: InsertLeadInterest): Promise<LeadInterest> {\n    const [newInterest] = await db.insert(leadInterests).values(leadInterest).returning();\n    return newInterest;\n  }\n\n  async getLeadInterests(leadId: string): Promise<LeadInterest[]> {\n    return await db.select().from(leadInterests).where(eq(leadInterests.leadId, leadId));\n  }\n\n  // Admin operations\n  async getPendingVerifications(): Promise<FreelancerWithRelations[]> {\n    const results = await db\n      .select()\n      .from(freelancerProfiles)\n      .leftJoin(users, eq(freelancerProfiles.userId, users.id))\n      .leftJoin(categories, eq(freelancerProfiles.categoryId, categories.id))\n      .where(eq(freelancerProfiles.verificationStatus, 'pending'))\n      .orderBy(desc(freelancerProfiles.createdAt));\n\n    return results.map(row => ({\n      ...row.freelancer_profiles,\n      user: row.users!,\n      category: row.categories!,\n      subscriptions: []\n    }));\n  }\n\n  async updateVerificationStatus(freelancerId: string, status: 'approved' | 'rejected'): Promise<void> {\n    await db.update(freelancerProfiles).set({ \n      verificationStatus: status,\n      updatedAt: new Date()\n    }).where(eq(freelancerProfiles.id, freelancerId));\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(desc(users.createdAt));\n  }\n\n  async getAllLeads(): Promise<LeadWithRelations[]> {\n    const results = await db\n      .select()\n      .from(leads)\n      .leftJoin(users, eq(leads.customerId, users.id))\n      .leftJoin(categories, eq(leads.categoryId, categories.id))\n      .leftJoin(freelancerProfiles, eq(leads.acceptedBy, freelancerProfiles.id))\n      .orderBy(desc(leads.createdAt));\n\n    return results.map(row => ({\n      ...row.leads,\n      customer: row.users!,\n      category: row.categories!,\n      acceptedByFreelancer: row.freelancer_profiles ? {\n        ...row.freelancer_profiles,\n        user: row.users!,\n        category: row.categories!,\n        subscriptions: []\n      } : undefined\n    }));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14373},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport { relations } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  integer,\n  decimal,\n  boolean,\n  pgEnum,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Enums\nexport const userRoleEnum = pgEnum('user_role', ['customer', 'freelancer', 'admin']);\nexport const leadStatusEnum = pgEnum('lead_status', ['pending', 'accepted', 'completed', 'cancelled']);\nexport const subscriptionStatusEnum = pgEnum('subscription_status', ['active', 'expired', 'cancelled']);\nexport const subscriptionTypeEnum = pgEnum('subscription_type', ['lead', 'position', 'badge']);\nexport const badgeTypeEnum = pgEnum('badge_type', ['verified', 'trusted']);\nexport const verificationStatusEnum = pgEnum('verification_status', ['pending', 'approved', 'rejected']);\n\n// User storage table.\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: userRoleEnum(\"role\").notNull().default('customer'),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Categories\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\").notNull(),\n  icon: varchar(\"icon\").notNull(),\n  color: varchar(\"color\").notNull(),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Freelancer profiles\nexport const freelancerProfiles = pgTable(\"freelancer_profiles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  categoryId: varchar(\"category_id\").notNull().references(() => categories.id),\n  \n  // Enhanced profile fields\n  professionalTitle: varchar(\"professional_title\"),\n  profilePhotoUrl: varchar(\"profile_photo_url\"),\n  workingAreas: text(\"working_areas\").array(), // pincodes or area names\n  bio: text(\"bio\"),\n  experience: varchar(\"experience\"), // years\n  experienceDescription: text(\"experience_description\"),\n  skills: text(\"skills\").array(),\n  portfolioImages: text(\"portfolio_images\").array(),\n  certifications: text(\"certifications\").array(),\n  idProofUrl: varchar(\"id_proof_url\"),\n  hourlyRate: varchar(\"hourly_rate\"),\n  \n  // Availability schedule (JSON format)\n  availabilitySchedule: jsonb(\"availability_schedule\"),\n  isAvailable: boolean(\"is_available\").default(true),\n  \n  // System fields\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default('0'),\n  totalJobs: integer(\"total_jobs\").default(0),\n  verificationStatus: verificationStatusEnum(\"verification_status\").default('pending'),\n  verificationDocs: text(\"verification_docs\").array(),\n  profileCompletionScore: integer(\"profile_completion_score\").default(0),\n  isOnline: boolean(\"is_online\").default(false),\n  lastSeen: timestamp(\"last_seen\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Leads/Job requests\nexport const leads = pgTable(\"leads\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  customerId: varchar(\"customer_id\").notNull().references(() => users.id),\n  categoryId: varchar(\"category_id\").notNull().references(() => categories.id),\n  title: varchar(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  budgetMin: integer(\"budget_min\"),\n  budgetMax: integer(\"budget_max\"),\n  location: varchar(\"location\").notNull(),\n  pincode: varchar(\"pincode\"),\n  preferredTime: varchar(\"preferred_time\"),\n  photos: text(\"photos\").array(),\n  status: leadStatusEnum(\"status\").default('pending'),\n  acceptedBy: varchar(\"accepted_by\").references(() => freelancerProfiles.id),\n  acceptedAt: timestamp(\"accepted_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Subscriptions\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  freelancerId: varchar(\"freelancer_id\").notNull().references(() => freelancerProfiles.id),\n  type: subscriptionTypeEnum(\"type\").notNull(),\n  status: subscriptionStatusEnum(\"status\").default('active'),\n  amount: integer(\"amount\").notNull(),\n  startDate: timestamp(\"start_date\").defaultNow(),\n  endDate: timestamp(\"end_date\").notNull(),\n  categoryId: varchar(\"category_id\").references(() => categories.id), // for position plans\n  area: varchar(\"area\"), // for position plans\n  position: integer(\"position\"), // 1, 2, or 3 for position plans\n  badgeType: badgeTypeEnum(\"badge_type\"), // for badge plans\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Lead interests (for free freelancers)\nexport const leadInterests = pgTable(\"lead_interests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  leadId: varchar(\"lead_id\").notNull().references(() => leads.id),\n  freelancerId: varchar(\"freelancer_id\").notNull().references(() => freelancerProfiles.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  freelancerProfile: one(freelancerProfiles, {\n    fields: [users.id],\n    references: [freelancerProfiles.userId],\n  }),\n}));\n\nexport const freelancerProfilesRelations = relations(freelancerProfiles, ({ one, many }) => ({\n  user: one(users, {\n    fields: [freelancerProfiles.userId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [freelancerProfiles.categoryId],\n    references: [categories.id],\n  }),\n  subscriptions: many(subscriptions),\n  acceptedLeads: many(leads),\n  leadInterests: many(leadInterests),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  customer: one(users, {\n    fields: [leads.customerId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [leads.categoryId],\n    references: [categories.id],\n  }),\n  acceptedByFreelancer: one(freelancerProfiles, {\n    fields: [leads.acceptedBy],\n    references: [freelancerProfiles.id],\n  }),\n  interests: many(leadInterests),\n}));\n\nexport const categoriesRelations = relations(categories, ({ many }) => ({\n  freelancers: many(freelancerProfiles),\n  leads: many(leads),\n  subscriptions: many(subscriptions),\n}));\n\nexport const subscriptionsRelations = relations(subscriptions, ({ one }) => ({\n  freelancer: one(freelancerProfiles, {\n    fields: [subscriptions.freelancerId],\n    references: [freelancerProfiles.id],\n  }),\n  category: one(categories, {\n    fields: [subscriptions.categoryId],\n    references: [categories.id],\n  }),\n}));\n\nexport const leadInterestsRelations = relations(leadInterests, ({ one }) => ({\n  lead: one(leads, {\n    fields: [leadInterests.leadId],\n    references: [leads.id],\n  }),\n  freelancer: one(freelancerProfiles, {\n    fields: [leadInterests.freelancerId],\n    references: [freelancerProfiles.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertFreelancerProfileSchema = createInsertSchema(freelancerProfiles).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  rating: true,\n  totalJobs: true,\n  profileCompletionScore: true,\n  isOnline: true,\n  lastSeen: true,\n}).extend({\n  skills: z.array(z.string()).optional(),\n  portfolioImages: z.array(z.string()).optional(),\n  certifications: z.array(z.string()).optional(),\n  workingAreas: z.array(z.string()).optional(),\n  verificationDocs: z.array(z.string()).optional(),\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  acceptedBy: true,\n  acceptedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeadInterestSchema = createInsertSchema(leadInterests).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\nexport type FreelancerProfile = typeof freelancerProfiles.$inferSelect;\nexport type InsertFreelancerProfile = z.infer<typeof insertFreelancerProfileSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type LeadInterest = typeof leadInterests.$inferSelect;\nexport type InsertLeadInterest = z.infer<typeof insertLeadInterestSchema>;\n\n// Extended types with relations\nexport type LeadWithRelations = Lead & {\n  customer: User;\n  category: Category;\n  acceptedByFreelancer?: FreelancerProfile & { user: User };\n};\n\nexport type FreelancerWithRelations = FreelancerProfile & {\n  user: User;\n  category: Category;\n  subscriptions: Subscription[];\n};\n\n// Form type for enhanced freelancer profile\nexport type InsertFreelancerProfileForm = z.infer<typeof insertFreelancerProfileSchema>;\n","size_bytes":9745},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport CustomerDashboard from \"@/pages/customer-dashboard\";\nimport FreelancerDashboard from \"@/pages/freelancer-dashboard\";\nimport AdminDashboard from \"@/pages/admin-dashboard\";\nimport JobPosting from \"@/pages/job-posting\";\nimport SubscriptionPlans from \"@/pages/subscription-plans\";\nimport Profile from \"@/pages/profile\";\nimport FreelancerProfile from \"@/pages/freelancer-profile\";\nimport PhoneAuth from \"@/pages/phone-auth\";\nimport CustomerSearch from \"@/pages/customer-search\";\nimport CustomerRequests from \"@/pages/customer-requests\";\n\nfunction Router() {\n  // Use Firebase auth for authentication state\n  const { user: firebaseUser, isLoading: firebaseLoading, isAuthenticated: firebaseAuth } = useFirebaseAuth();\n\n  if (firebaseLoading) {\n    return (\n      <div className=\"mobile-container\">\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"spinner\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mobile-container\">\n      <Switch>\n        {!firebaseAuth ? (\n          <>\n            <Route path=\"/\" component={Landing} />\n            <Route path=\"/phone-auth\" component={PhoneAuth} />\n          </>\n        ) : (\n          <>\n            <Route path=\"/\" component={Home} />\n            <Route path=\"/customer\" component={CustomerDashboard} />\n            <Route path=\"/customer/search\" component={CustomerSearch} />\n            <Route path=\"/customer/requests\" component={CustomerRequests} />\n            <Route path=\"/freelancer\" component={FreelancerDashboard} />\n            <Route path=\"/admin\" component={AdminDashboard} />\n            <Route path=\"/post-job\" component={JobPosting} />\n            <Route path=\"/plans\" component={SubscriptionPlans} />\n            <Route path=\"/profile\" component={Profile} />\n            <Route path=\"/customer/profile\" component={Profile} />\n            <Route path=\"/freelancer/profile\" component={FreelancerProfile} />\n            <Route path=\"/admin/profile\" component={Profile} />\n          </>\n        )}\n        <Route component={NotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2805},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Dark purple theme */\n  --background: hsl(252 47% 11%); /* #1E1B2E */\n  --foreground: hsl(0 0% 100%); /* White text */\n  --card: hsl(252 35% 15%); /* Slightly lighter purple for cards */\n  --card-foreground: hsl(0 0% 95%);\n  --popover: hsl(252 47% 11%);\n  --popover-foreground: hsl(0 0% 100%);\n  --primary: hsl(267 83% 53%); /* Purple accent */\n  --primary-foreground: hsl(0 0% 100%);\n  --primary-light: hsl(267 66% 73%); /* Light purple */\n  --primary-lighter: hsl(267 65% 80%); /* Lighter purple */\n  --primary-dark: hsl(267 83% 43%); /* Darker purple */\n  --secondary: hsl(252 25% 25%); /* Medium purple-gray */\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(252 20% 20%); /* Muted purple */\n  --muted-foreground: hsl(0 0% 70%); /* Light gray text */\n  --accent: hsl(267 50% 25%); /* Purple accent background */\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356 90% 54%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(252 20% 25%); /* Purple border */\n  --input: hsl(252 25% 18%); /* Dark input background */\n  --ring: hsl(267 83% 53%);\n  --success: hsl(142 76% 45%);\n  --warning: hsl(38 92% 60%);\n  --error: hsl(0 84% 65%);\n  --surface: hsl(252 47% 11%); /* Main background */\n  --on-surface: hsl(0 0% 100%); /* White text on surface */\n  --chart-1: hsl(267 83% 53%);\n  --chart-2: hsl(159 100% 45%);\n  --chart-3: hsl(42 92% 60%);\n  --chart-4: hsl(147 78% 50%);\n  --chart-5: hsl(341 75% 60%);\n  --sidebar: hsl(252 35% 15%);\n  --sidebar-foreground: hsl(0 0% 95%);\n  --sidebar-primary: hsl(267 83% 53%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(267 50% 25%);\n  --sidebar-accent-foreground: hsl(0 0% 100%);\n  --sidebar-border: hsl(252 20% 25%);\n  --sidebar-ring: hsl(267 83% 53%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n}\n\n/* Remove dark mode override since we're always dark now */\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-surface text-on-surface;\n  }\n}\n\n/* Purple gradient utilities */\n.bg-gradient-purple {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary-light)) 100%);\n}\n\n.bg-gradient-purple-light {\n  background: linear-gradient(135deg, hsl(var(--primary-light)) 0%, hsl(var(--primary-lighter)) 100%);\n}\n\n/* Mobile container for app-like experience */\n.mobile-container {\n  max-width: 28rem;\n  margin: 0 auto;\n  background: hsl(var(--background));\n  box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);\n  min-height: 100vh;\n  position: relative;\n}\n\n/* Status bar styling */\n.status-bar {\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary-light)) 100%);\n  color: white;\n  padding: 0.5rem 1rem;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 0.875rem;\n}\n\n/* Custom scrollbar for mobile feel */\n::-webkit-scrollbar {\n  width: 0px;\n  background: transparent;\n}\n\n/* Smooth focus transitions */\ninput:focus, \nselect:focus, \ntextarea:focus {\n  transition: border-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out;\n}\n\n/* Button hover effects */\n.hover-lift:hover {\n  transform: translateY(-2px);\n  transition: transform 0.2s ease-in-out;\n}\n\n/* Card hover effects */\n.card-hover:hover {\n  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n  transition: box-shadow 0.2s ease-in-out;\n}\n\n/* Animation for page transitions */\n.page-transition {\n  animation: slideInFromRight 0.3s ease-out;\n}\n\n@keyframes slideInFromRight {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n/* Floating action button */\n.fab {\n  position: fixed;\n  bottom: 5rem;\n  right: 1.5rem;\n  width: 3.5rem;\n  height: 3.5rem;\n  background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--primary-light)) 100%);\n  color: white;\n  border-radius: 50%;\n  box-shadow: 0 10px 25px -5px rgba(107, 70, 193, 0.4);\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 1.25rem;\n  border: none;\n  cursor: pointer;\n  transition: all 0.2s ease-in-out;\n  z-index: 1000;\n}\n\n.fab:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 15px 35px -5px rgba(107, 70, 193, 0.5);\n}\n\n/* Bottom navigation */\n.bottom-nav {\n  position: fixed;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  background: hsl(var(--card));\n  border-top: 1px solid hsl(var(--border));\n  z-index: 100;\n  backdrop-filter: blur(10px);\n}\n\n.bottom-nav .nav-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 0.5rem 0.75rem;\n  color: hsl(var(--muted-foreground));\n  text-decoration: none;\n  transition: color 0.2s ease-in-out;\n}\n\n.bottom-nav .nav-item.active {\n  color: hsl(var(--primary));\n}\n\n.bottom-nav .nav-item i {\n  font-size: 1.125rem;\n  margin-bottom: 0.25rem;\n}\n\n.bottom-nav .nav-item span {\n  font-size: 0.75rem;\n  font-weight: 500;\n}\n\n/* Lead card animations */\n.lead-card {\n  animation: fadeInUp 0.3s ease-out;\n}\n\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n/* Notification styles */\n.notification-dot {\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  width: 6px;\n  height: 6px;\n  background: hsl(var(--error));\n  border-radius: 50%;\n  border: 2px solid white;\n}\n\n/* Badge styles */\n.badge-verified {\n  background: hsl(var(--success));\n  color: white;\n  font-size: 0.75rem;\n  font-weight: 600;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem;\n}\n\n.badge-trusted {\n  background: hsl(var(--warning));\n  color: white;\n  font-size: 0.75rem;\n  font-weight: 600;\n  padding: 0.25rem 0.5rem;\n  border-radius: 0.5rem;\n}\n\n/* Position indicator */\n.position-indicator {\n  position: absolute;\n  top: -8px;\n  left: -8px;\n  width: 24px;\n  height: 24px;\n  background: hsl(var(--warning));\n  color: white;\n  border-radius: 50%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 0.75rem;\n  font-weight: bold;\n  border: 2px solid white;\n}\n\n/* Loading spinner */\n.spinner {\n  width: 20px;\n  height: 20px;\n  border: 2px solid hsl(var(--muted));\n  border-top: 2px solid hsl(var(--primary));\n  border-radius: 50%;\n  animation: spin 1s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n","size_bytes":6535},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/category-grid.tsx":{"content":"import type { Category } from \"@shared/schema\";\n\ninterface CategoryGridProps {\n  categories: Category[];\n  onCategorySelect: (categoryId: string) => void;\n}\n\nconst getCategoryIcon = (categoryName: string): string => {\n  const name = categoryName.toLowerCase();\n  if (name.includes('electric')) return 'fas fa-bolt';\n  if (name.includes('plumb')) return 'fas fa-wrench';\n  if (name.includes('carpen')) return 'fas fa-hammer';\n  if (name.includes('paint')) return 'fas fa-paint-brush';\n  if (name.includes('mechanic')) return 'fas fa-car';\n  if (name.includes('ac') || name.includes('appliance')) return 'fas fa-snowflake';\n  if (name.includes('weld')) return 'fas fa-fire';\n  if (name.includes('mason')) return 'fas fa-brick-wall';\n  if (name.includes('garden')) return 'fas fa-leaf';\n  if (name.includes('clean')) return 'fas fa-broom';\n  if (name.includes('interior') || name.includes('design')) return 'fas fa-couch';\n  if (name.includes('driver')) return 'fas fa-taxi';\n  if (name.includes('tutor')) return 'fas fa-book';\n  if (name.includes('photo')) return 'fas fa-camera';\n  if (name.includes('makeup')) return 'fas fa-palette';\n  if (name.includes('it') || name.includes('technician')) return 'fas fa-laptop';\n  if (name.includes('event')) return 'fas fa-calendar';\n  if (name.includes('pest')) return 'fas fa-bug';\n  if (name.includes('mover') || name.includes('packer')) return 'fas fa-truck';\n  return 'fas fa-tools';\n};\n\nconst getCategoryColor = (categoryName: string): string => {\n  const name = categoryName.toLowerCase();\n  if (name.includes('electric')) return 'bg-yellow-500/20 text-yellow-400';\n  if (name.includes('plumb')) return 'bg-blue-500/20 text-blue-400';\n  if (name.includes('carpen')) return 'bg-green-500/20 text-green-400';\n  if (name.includes('paint')) return 'bg-purple-500/20 text-purple-400';\n  if (name.includes('mechanic')) return 'bg-red-500/20 text-red-400';\n  if (name.includes('ac') || name.includes('appliance')) return 'bg-cyan-500/20 text-cyan-400';\n  if (name.includes('weld')) return 'bg-orange-500/20 text-orange-400';\n  if (name.includes('mason')) return 'bg-gray-500/20 text-gray-400';\n  if (name.includes('garden')) return 'bg-emerald-500/20 text-emerald-400';\n  if (name.includes('clean')) return 'bg-teal-500/20 text-teal-400';\n  if (name.includes('interior') || name.includes('design')) return 'bg-pink-500/20 text-pink-400';\n  if (name.includes('driver')) return 'bg-indigo-500/20 text-indigo-400';\n  if (name.includes('tutor')) return 'bg-violet-500/20 text-violet-400';\n  if (name.includes('photo')) return 'bg-slate-500/20 text-slate-400';\n  if (name.includes('makeup')) return 'bg-rose-500/20 text-rose-400';\n  if (name.includes('it') || name.includes('technician')) return 'bg-blue-500/20 text-blue-400';\n  if (name.includes('event')) return 'bg-amber-500/20 text-amber-400';\n  if (name.includes('pest')) return 'bg-lime-500/20 text-lime-400';\n  if (name.includes('mover') || name.includes('packer')) return 'bg-stone-500/20 text-stone-400';\n  return 'bg-primary/20 text-primary';\n};\n\nexport default function CategoryGrid({ categories, onCategorySelect }: CategoryGridProps) {\n  // Ensure we don't show more than 6 categories, with \"More\" as the 6th item\n  const displayCategories = categories.slice(0, 5);\n  const hasMore = categories.length > 5;\n\n  return (\n    <div className=\"grid grid-cols-3 gap-4\">\n      {displayCategories.map((category) => (\n        <div\n          key={category.id}\n          onClick={() => onCategorySelect(category.id)}\n          className=\"bg-card rounded-2xl p-5 shadow-lg border border-border text-center cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-200 card-hover\"\n          data-testid={`category-${category.id}`}\n        >\n          <div className={`w-14 h-14 ${getCategoryColor(category.name)} rounded-2xl flex items-center justify-center mx-auto mb-3`}>\n            <i className={`${getCategoryIcon(category.name)} text-xl`}></i>\n          </div>\n          <p className=\"text-xs font-semibold text-card-foreground leading-tight\">\n            {category.name}\n          </p>\n        </div>\n      ))}\n      \n      {hasMore && (\n        <div\n          onClick={() => {/* TODO: Show all categories */}}\n          className=\"bg-card rounded-2xl p-5 shadow-lg border border-border text-center cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-200 card-hover\"\n          data-testid=\"category-more\"\n        >\n          <div className=\"w-14 h-14 bg-muted rounded-2xl flex items-center justify-center mx-auto mb-3\">\n            <i className=\"fas fa-ellipsis-h text-muted-foreground text-xl\"></i>\n          </div>\n          <p className=\"text-xs font-semibold text-card-foreground\">More</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4760},"client/src/components/freelancer-card.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { FreelancerWithRelations } from \"@shared/schema\";\n\ninterface FreelancerCardProps {\n  freelancer: FreelancerWithRelations;\n  onContact?: () => void;\n  showPositionIndicator?: boolean;\n  position?: number;\n}\n\nexport default function FreelancerCard({ \n  freelancer, \n  onContact, \n  showPositionIndicator = false,\n  position \n}: FreelancerCardProps) {\n  const hasActiveLeadPlan = freelancer.subscriptions?.some(\n    sub => sub.type === 'lead' && sub.status === 'active' && new Date(sub.endDate) > new Date()\n  );\n\n  const hasBadgePlan = freelancer.subscriptions?.find(\n    sub => sub.type === 'badge' && sub.status === 'active' && new Date(sub.endDate) > new Date()\n  );\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm border border-gray-100 hover:shadow-md transition-shadow card-hover relative\">\n      {showPositionIndicator && position && (\n        <div className=\"position-indicator\" data-testid={`position-indicator-${position}`}>\n          #{position}\n        </div>\n      )}\n      \n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start space-x-3\">\n          {/* Profile Image */}\n          <div className=\"w-12 h-12 bg-gray-200 rounded-full flex items-center justify-center flex-shrink-0\">\n            {freelancer.user.profileImageUrl ? (\n              <img \n                src={freelancer.user.profileImageUrl} \n                alt={`${freelancer.user.firstName}'s profile`}\n                className=\"w-12 h-12 rounded-full object-cover\"\n                data-testid={`img-profile-${freelancer.id}`}\n              />\n            ) : (\n              <i className=\"fas fa-user text-gray-600\"></i>\n            )}\n          </div>\n\n          {/* Freelancer Info */}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center justify-between mb-1\">\n              <h3 className=\"font-medium text-on-surface truncate\" data-testid={`text-name-${freelancer.id}`}>\n                {freelancer.user.firstName} {freelancer.user.lastName}\n              </h3>\n              <div className=\"flex items-center space-x-1\">\n                {hasActiveLeadPlan && (\n                  <div className=\"w-6 h-6 bg-green-100 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-thumbs-up text-green-600 text-xs\" data-testid=\"icon-paid-freelancer\"></i>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <p className=\"text-sm text-gray-600 mb-1\">{freelancer.category.name}</p>\n            \n            {freelancer.bio && (\n              <p className=\"text-xs text-gray-500 mb-2 line-clamp-2\">\n                {freelancer.bio}\n              </p>\n            )}\n\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n                <span className=\"flex items-center\">\n                  <i className=\"fas fa-star text-yellow-500 mr-1\"></i>\n                  {freelancer.rating || '0.0'}\n                </span>\n                <span>{freelancer.totalJobs || 0} jobs</span>\n                {freelancer.experience && (\n                  <span>{freelancer.experience}</span>\n                )}\n              </div>\n\n              <div className=\"flex items-center space-x-1\">\n                {freelancer.verificationStatus === 'approved' && (\n                  <Badge className=\"badge-verified text-xs\">\n                    VERIFIED\n                  </Badge>\n                )}\n                {hasBadgePlan && (\n                  <Badge className={hasBadgePlan.badgeType === 'trusted' ? 'badge-trusted' : 'badge-verified'}>\n                    {hasBadgePlan.badgeType?.toUpperCase()}\n                  </Badge>\n                )}\n              </div>\n            </div>\n\n            {/* Working Areas */}\n            {freelancer.workingAreas && freelancer.workingAreas.length > 0 && (\n              <div className=\"mt-2\">\n                <p className=\"text-xs text-gray-500\">\n                  <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                  Areas: {freelancer.workingAreas.slice(0, 2).join(', ')}\n                  {freelancer.workingAreas.length > 2 && ` +${freelancer.workingAreas.length - 2} more`}\n                </p>\n              </div>\n            )}\n\n            {/* Online Status */}\n            <div className=\"flex items-center justify-between mt-3\">\n              <div className=\"flex items-center space-x-1\">\n                <span className={`w-2 h-2 rounded-full ${freelancer.isOnline ? 'bg-green-500' : 'bg-gray-400'}`}></span>\n                <span className=\"text-xs text-gray-500\">\n                  {freelancer.isOnline ? 'Online' : 'Offline'}\n                </span>\n              </div>\n\n              {onContact && (\n                <Button \n                  size=\"sm\" \n                  onClick={onContact}\n                  className=\"bg-gradient-purple text-white text-xs px-3 py-1\"\n                  data-testid={`button-contact-${freelancer.id}`}\n                >\n                  Contact\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5360},"client/src/components/lead-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport type { LeadWithRelations } from \"@shared/schema\";\n\ninterface LeadCardProps {\n  lead: LeadWithRelations;\n  canAccept: boolean;\n  onAccept: () => void;\n  onExpressInterest: () => void;\n  isAccepting: boolean;\n  isExpressingInterest: boolean;\n}\n\nexport default function LeadCard({ \n  lead, \n  canAccept, \n  onAccept, \n  onExpressInterest,\n  isAccepting,\n  isExpressingInterest \n}: LeadCardProps) {\n  const timeAgo = (date: string) => {\n    const now = new Date();\n    const leadDate = new Date(date);\n    const diffInMinutes = Math.floor((now.getTime() - leadDate.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes} min ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;\n    return `${Math.floor(diffInMinutes / 1440)} days ago`;\n  };\n\n  const getBorderColor = () => {\n    if (canAccept) return 'border-l-primary';\n    return 'border-l-orange-400';\n  };\n\n  return (\n    <Card className={`bg-white rounded-xl p-4 shadow-sm border-l-4 ${getBorderColor()} lead-card`}>\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex-1\">\n            <h4 className=\"font-medium text-on-surface mb-1\" data-testid={`text-lead-title-${lead.id}`}>\n              {lead.title}\n            </h4>\n            <p className=\"text-gray-600 text-sm mb-2 line-clamp-2\">\n              {lead.description}\n            </p>\n            <div className=\"flex items-center space-x-4 text-xs text-gray-500\">\n              <span>\n                <i className=\"fas fa-map-marker-alt mr-1\"></i>\n                {lead.location}\n              </span>\n              <span>\n                <i className=\"fas fa-clock mr-1\"></i>\n                {timeAgo(lead.createdAt!)}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right ml-4\">\n            <p className=\"text-primary font-semibold text-sm\" data-testid={`text-budget-${lead.id}`}>\n              ₹{lead.budgetMin}-{lead.budgetMax}\n            </p>\n            {lead.preferredTime && (\n              <p className=\"text-xs text-gray-500 mt-1\">\n                {lead.preferredTime.replace('_', ' ')}\n              </p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"flex space-x-2\">\n          {canAccept ? (\n            <Button\n              onClick={onAccept}\n              disabled={isAccepting}\n              className=\"flex-1 bg-gradient-purple text-white py-2 rounded-lg text-sm font-medium hover:opacity-90\"\n              data-testid={`button-accept-lead-${lead.id}`}\n            >\n              {isAccepting ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"spinner mr-1\"></div>\n                  Accepting...\n                </div>\n              ) : (\n                \"Accept Lead\"\n              )}\n            </Button>\n          ) : (\n            <Button\n              onClick={onExpressInterest}\n              disabled={isExpressingInterest}\n              className=\"flex-1 bg-gradient-purple-light text-white py-2 rounded-lg text-sm font-medium hover:opacity-90\"\n              data-testid={`button-express-interest-${lead.id}`}\n            >\n              {isExpressingInterest ? (\n                <div className=\"flex items-center justify-center\">\n                  <div className=\"spinner mr-1\"></div>\n                  Expressing...\n                </div>\n              ) : (\n                \"Express Interest\"\n              )}\n            </Button>\n          )}\n          <Button\n            variant=\"outline\"\n            className=\"px-4 border border-gray-300 text-gray-600 py-2 rounded-lg text-sm hover:bg-gray-50\"\n            data-testid={`button-view-details-${lead.id}`}\n          >\n            Details\n          </Button>\n        </div>\n\n        {!canAccept && (\n          <div className=\"mt-2 p-2 bg-yellow-50 rounded-lg\">\n            <p className=\"text-xs text-yellow-700\">\n              <i className=\"fas fa-info-circle mr-1\"></i>\n              Upgrade to Lead Plan to accept leads instantly\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4337},"client/src/components/navigation.tsx":{"content":"import { useLocation } from \"wouter\";\n\ninterface NavigationProps {\n  currentPage: string;\n  userRole: 'customer' | 'freelancer' | 'admin';\n}\n\nexport default function Navigation({ currentPage, userRole }: NavigationProps) {\n  const [, setLocation] = useLocation();\n\n  const getNavItems = () => {\n    switch (userRole) {\n      case 'customer':\n        return [\n          { id: 'home', icon: 'fas fa-home', label: 'Home', path: '/customer' },\n          { id: 'search', icon: 'fas fa-search', label: 'Search', path: '/customer/search' },\n          { id: 'requests', icon: 'fas fa-list', label: 'Requests', path: '/customer/requests' },\n          { id: 'profile', icon: 'fas fa-user', label: 'Profile', path: '/customer/profile' },\n        ];\n      case 'freelancer':\n        return [\n          { id: 'dashboard', icon: 'fas fa-home', label: 'Dashboard', path: '/freelancer' },\n          { id: 'leads', icon: 'fas fa-list-alt', label: 'Leads', path: '/freelancer/leads' },\n          { id: 'plans', icon: 'fas fa-credit-card', label: 'Plans', path: '/plans' },\n          { id: 'profile', icon: 'fas fa-user', label: 'Profile', path: '/freelancer/profile' },\n        ];\n      case 'admin':\n        return [\n          { id: 'dashboard', icon: 'fas fa-tachometer-alt', label: 'Dashboard', path: '/admin' },\n          { id: 'users', icon: 'fas fa-users', label: 'Users', path: '/admin/users' },\n          { id: 'leads', icon: 'fas fa-tasks', label: 'Leads', path: '/admin/leads' },\n          { id: 'settings', icon: 'fas fa-cog', label: 'Settings', path: '/admin/settings' },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  const navItems = getNavItems();\n\n  const handleNavigation = (path: string) => {\n    setLocation(path);\n  };\n\n  return (\n    <div className=\"bottom-nav\">\n      <div className=\"max-w-md mx-auto\">\n        <div className=\"flex items-center justify-around py-2\">\n          {navItems.map((item) => (\n            <button\n              key={item.id}\n              onClick={() => handleNavigation(item.path)}\n              className={`nav-item ${currentPage === item.id ? 'active' : ''}`}\n              data-testid={`nav-${item.id}`}\n            >\n              <i className={`${item.icon} text-lg mb-1`}></i>\n              <span className=\"text-xs\">{item.label}</span>\n            </button>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2368},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}\n","size_bytes":257},"client/src/hooks/useFirebaseAuth.ts":{"content":"import { useEffect, useState } from 'react';\nimport { onAuthStateChanged, User } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\n\nexport function useFirebaseAuth() {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user);\n      setIsLoading(false);\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":539},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef } from 'react';\nimport { useAuth } from './useAuth';\n\ninterface WebSocketOptions {\n  onMessage: (data: any) => void;\n  onConnect?: () => void;\n  onDisconnect?: () => void;\n  onError?: (error: Event) => void;\n}\n\nexport function useWebSocket({ onMessage, onConnect, onDisconnect, onError }: WebSocketOptions) {\n  const { user, isAuthenticated } = useAuth();\n  const socketRef = useRef<WebSocket | null>(null);\n  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const maxReconnectAttempts = 5;\n  const reconnectAttemptsRef = useRef(0);\n\n  const connect = () => {\n    if (!isAuthenticated || !user || !('id' in user) || !user.id) return;\n\n    // Don't create multiple connections\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      return;\n    }\n\n    try {\n      const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n      const wsUrl = `${protocol}//${window.location.host}/ws?userId=${(user && 'id' in user) ? user.id : ''}`;\n      \n      socketRef.current = new WebSocket(wsUrl);\n\n      socketRef.current.onopen = () => {\n        console.log('WebSocket connected');\n        reconnectAttemptsRef.current = 0; // Reset reconnect attempts on successful connection\n        onConnect?.();\n      };\n\n      socketRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          onMessage(data);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      socketRef.current.onclose = (event) => {\n        console.log('WebSocket disconnected', event.code, event.reason);\n        onDisconnect?.();\n\n        // Attempt to reconnect if not intentionally closed\n        if (event.code !== 1000 && reconnectAttemptsRef.current < maxReconnectAttempts) {\n          const timeout = Math.pow(2, reconnectAttemptsRef.current) * 1000; // Exponential backoff\n          reconnectAttemptsRef.current++;\n          \n          reconnectTimeoutRef.current = setTimeout(() => {\n            console.log(`Attempting to reconnect (${reconnectAttemptsRef.current}/${maxReconnectAttempts})...`);\n            connect();\n          }, timeout);\n        }\n      };\n\n      socketRef.current.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        onError?.(error);\n      };\n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n    }\n  };\n\n  const disconnect = () => {\n    if (reconnectTimeoutRef.current) {\n      clearTimeout(reconnectTimeoutRef.current);\n      reconnectTimeoutRef.current = null;\n    }\n\n    if (socketRef.current) {\n      socketRef.current.close(1000, 'Component unmounted');\n      socketRef.current = null;\n    }\n  };\n\n  const sendMessage = (data: any) => {\n    if (socketRef.current && socketRef.current.readyState === WebSocket.OPEN) {\n      socketRef.current.send(JSON.stringify(data));\n      return true;\n    }\n    return false;\n  };\n\n  // Connect when authenticated\n  useEffect(() => {\n    if (isAuthenticated && user && 'id' in user && user.id) {\n      connect();\n    }\n\n    return () => {\n      disconnect();\n    };\n  }, [isAuthenticated, user]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      disconnect();\n    };\n  }, []);\n\n  return {\n    isConnected: socketRef.current?.readyState === WebSocket.OPEN,\n    sendMessage,\n    reconnect: connect,\n  };\n}\n","size_bytes":3425},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, GoogleAuthProvider, signInWithPopup, signOut, RecaptchaVerifier, signInWithPhoneNumber, type ConfirmationResult } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Initialize Firebase Authentication and get a reference to the service\nexport const auth = getAuth(app);\n\n// Initialize Google Provider\nexport const googleProvider = new GoogleAuthProvider();\ngoogleProvider.addScope('email');\ngoogleProvider.addScope('profile');\n\n// Sign in with Google\nexport const signInWithGoogle = async () => {\n  try {\n    const result = await signInWithPopup(auth, googleProvider);\n    return result.user;\n  } catch (error) {\n    console.error(\"Error signing in with Google:\", error);\n    throw error;\n  }\n};\n\n// Phone authentication\nexport const setupRecaptcha = (containerId: string) => {\n  return new RecaptchaVerifier(auth, containerId, {\n    size: 'invisible',\n    callback: () => {\n      console.log(\"reCAPTCHA solved\");\n    },\n  });\n};\n\nexport const sendOTP = async (phoneNumber: string, recaptcha: RecaptchaVerifier) => {\n  try {\n    const confirmationResult = await signInWithPhoneNumber(auth, phoneNumber, recaptcha);\n    return confirmationResult;\n  } catch (error) {\n    console.error(\"Error sending OTP:\", error);\n    throw error;\n  }\n};\n\nexport const verifyOTP = async (confirmationResult: ConfirmationResult, otp: string) => {\n  try {\n    const result = await confirmationResult.confirm(otp);\n    return result.user;\n  } catch (error) {\n    console.error(\"Error verifying OTP:\", error);\n    throw error;\n  }\n};\n\n// Sign out\nexport const signOutUser = async () => {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Error signing out:\", error);\n    throw error;\n  }\n};\n\nexport default app;","size_bytes":2230},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/admin-dashboard.tsx":{"content":"import { useEffect } from \"react\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport Navigation from \"@/components/navigation\";\n\nexport default function AdminDashboard() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  // Mock data for admin dashboard\n  const stats = {\n    totalUsers: 1250,\n    totalFreelancers: 450,\n    totalLeads: 89,\n    pendingVerifications: 12\n  };\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6 pb-8\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-white bg-opacity-20 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <i className=\"fas fa-crown text-2xl\"></i>\n          </div>\n          <h1 className=\"text-2xl font-bold mb-2\">Admin Dashboard</h1>\n          <p className=\"text-purple-100 text-sm\">\n            Welcome, {firebaseUser?.displayName || firebaseUser?.email || 'Admin'}!\n          </p>\n        </div>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"p-6 -mt-4\">\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-blue-600 mb-1\">{stats.totalUsers}</div>\n              <div className=\"text-sm text-gray-600\">Total Users</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-green-600 mb-1\">{stats.totalFreelancers}</div>\n              <div className=\"text-sm text-gray-600\">Freelancers</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-orange-600 mb-1\">{stats.totalLeads}</div>\n              <div className=\"text-sm text-gray-600\">Active Leads</div>\n            </CardContent>\n          </Card>\n          \n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-red-600 mb-1\">{stats.pendingVerifications}</div>\n              <div className=\"text-sm text-gray-600\">Pending Verifications</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"space-y-3 mb-6\">\n          <h2 className=\"text-lg font-semibold text-on-surface\">Quick Actions</h2>\n          \n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-purple-100 rounded-xl flex items-center justify-center\">\n                    <i className=\"fas fa-users text-purple-600 text-xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-on-surface\">Manage Users</h3>\n                    <p className=\"text-gray-600 text-sm\">View and manage all users</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  View All\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-orange-100 rounded-xl flex items-center justify-center\">\n                    <i className=\"fas fa-clipboard-list text-orange-600 text-xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-on-surface\">Review Leads</h3>\n                    <p className=\"text-gray-600 text-sm\">Monitor all leads and transactions</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  Review\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-100 rounded-xl flex items-center justify-center\">\n                    <i className=\"fas fa-certificate text-green-600 text-xl\"></i>\n                  </div>\n                  <div>\n                    <h3 className=\"font-semibold text-on-surface\">Verifications</h3>\n                    <p className=\"text-gray-600 text-sm\">Approve freelancer verifications</p>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  {stats.pendingVerifications}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <Navigation />\n    </div>\n  );\n}","size_bytes":6456},"client/src/pages/customer-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport CategoryGrid from \"@/components/category-grid\";\nimport Navigation from \"@/components/navigation\";\nimport type { Category, LeadWithRelations } from \"@shared/schema\";\n\nexport default function CustomerDashboard() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Mock data for now since backend API is using different auth\n  const categories: Category[] = [\n    { id: '1', name: 'Electrical', description: 'Electrical services', icon: 'fas fa-bolt' },\n    { id: '2', name: 'Plumbing', description: 'Plumbing services', icon: 'fas fa-wrench' },\n    { id: '3', name: 'Carpentry', description: 'Carpentry services', icon: 'fas fa-hammer' },\n    { id: '4', name: 'Cleaning', description: 'Cleaning services', icon: 'fas fa-broom' },\n    { id: '5', name: 'Painting', description: 'Painting services', icon: 'fas fa-paint-brush' },\n    { id: '6', name: 'Gardening', description: 'Gardening services', icon: 'fas fa-leaf' },\n  ];\n  \n  const leads: LeadWithRelations[] = [];\n  const categoriesLoading = false;\n  const leadsLoading = false;\n\n  const handleCategorySelect = (categoryId: string) => {\n    // Navigate to freelancer search or post job with category pre-selected\n    setLocation(`/post-job?category=${categoryId}`);\n  };\n\n  const handlePostJob = () => {\n    setLocation('/post-job');\n  };\n\n  if (isLoading || categoriesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background text-foreground\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-xl font-bold mb-1\" data-testid=\"text-greeting\">\n              Hello, {firebaseUser?.displayName || firebaseUser?.email || 'Customer'}!\n            </h2>\n            <p className=\"text-purple-100 text-sm opacity-90\">What service do you need today?</p>\n          </div>\n          <div className=\"w-12 h-12 bg-white bg-opacity-15 rounded-2xl flex items-center justify-center backdrop-blur-sm\">\n            <i className=\"fas fa-bell text-lg\"></i>\n          </div>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search for services...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full bg-card/50 backdrop-blur-sm text-white px-4 py-4 pl-12 rounded-2xl placeholder-white/60 border border-white/10 focus:border-white/30\"\n            data-testid=\"input-search-services\"\n          />\n          <i className=\"fas fa-search absolute left-4 top-1/2 transform -translate-y-1/2 text-white/60\"></i>\n        </div>\n      </div>\n\n      {/* Categories Grid */}\n      <div className=\"p-6 bg-background\">\n        <h3 className=\"font-bold text-foreground mb-6 text-lg\">Popular Services</h3>\n        <CategoryGrid \n          categories={categories || []} \n          onCategorySelect={handleCategorySelect}\n        />\n\n        {/* Recent Activity */}\n        {leads && leads.length > 0 && (\n          <div className=\"mt-8\">\n            <h3 className=\"font-bold text-foreground mb-6 text-lg\">Your Recent Requests</h3>\n            <div className=\"space-y-4\">\n              {leads.slice(0, 3).map((lead) => (\n                <div key={lead.id} className=\"bg-card rounded-2xl p-5 shadow-lg border border-border lead-card hover:shadow-xl transition-all duration-200\">\n                  <div className=\"flex items-center justify-between mb-3\">\n                    <span className=\"font-semibold text-card-foreground\" data-testid={`text-lead-title-${lead.id}`}>\n                      {lead.title}\n                    </span>\n                    <span className={`text-xs px-3 py-1.5 rounded-full font-medium ${\n                      lead.status === 'completed' ? 'bg-success/20 text-success' :\n                      lead.status === 'accepted' ? 'bg-primary/20 text-primary' :\n                      'bg-warning/20 text-warning'\n                    }`}>\n                      {lead.status}\n                    </span>\n                  </div>\n                  <p className=\"text-muted-foreground text-sm mb-3\">{lead.description}</p>\n                  <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                    <span>{new Date(lead.createdAt!).toLocaleDateString()}</span>\n                    <span className=\"font-medium text-primary\">\n                      ₹{lead.budgetMin}-{lead.budgetMax}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Floating Action Button */}\n      <Button\n        onClick={handlePostJob}\n        className=\"fab hover:scale-105 transition-transform duration-200\"\n        data-testid=\"button-post-job-fab\"\n      >\n        <i className=\"fas fa-plus text-xl\"></i>\n      </Button>\n\n      {/* Bottom Navigation */}\n      <Navigation currentPage=\"home\" userRole=\"customer\" />\n    </div>\n  );\n}\n","size_bytes":6180},"client/src/pages/customer-requests.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport Navigation from \"@/components/navigation\";\nimport type { LeadWithRelations } from \"@shared/schema\";\n\nexport default function CustomerRequests() {\n  const { isAuthenticated, isLoading, user } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const [filter, setFilter] = useState<'all' | 'pending' | 'accepted' | 'completed' | 'cancelled'>('all');\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Fetch user's requests/leads\n  const { data: leads, isLoading: leadsLoading } = useQuery<LeadWithRelations[]>({\n    queryKey: ['/api/customer/leads'],\n    retry: false,\n    enabled: !!user,\n  });\n\n  const filteredLeads = leads?.filter(lead => \n    filter === 'all' || lead.status === filter\n  ) || [];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'bg-green-100 text-green-700';\n      case 'accepted':\n        return 'bg-blue-100 text-blue-700';\n      case 'cancelled':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-yellow-100 text-yellow-700';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return 'fas fa-check-circle';\n      case 'accepted':\n        return 'fas fa-clock';\n      case 'cancelled':\n        return 'fas fa-times-circle';\n      default:\n        return 'fas fa-hourglass-half';\n    }\n  };\n\n  if (isLoading || leadsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background text-foreground\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <button \n            onClick={() => setLocation('/customer')}\n            className=\"text-white hover:bg-white/15 p-3 rounded-2xl transition-colors backdrop-blur-sm\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left text-lg\"></i>\n          </button>\n          <h1 className=\"text-xl font-bold\">My Requests</h1>\n          <button \n            onClick={() => setLocation('/post-job')}\n            className=\"text-white hover:bg-white/15 p-3 rounded-2xl transition-colors backdrop-blur-sm\"\n            data-testid=\"button-add-request\"\n          >\n            <i className=\"fas fa-plus text-lg\"></i>\n          </button>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex gap-2 overflow-x-auto\">\n          {['all', 'pending', 'accepted', 'completed', 'cancelled'].map((status) => (\n            <Button\n              key={status}\n              onClick={() => setFilter(status as any)}\n              variant={filter === status ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              className=\"whitespace-nowrap text-white border-white/20 capitalize hover:bg-white/10\"\n              data-testid={`filter-${status}`}\n            >\n              {status === 'all' ? 'All' : status}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Requests List */}\n      <div className=\"p-6 bg-background\">\n        {filteredLeads.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <i className=\"fas fa-clipboard-list text-5xl text-muted-foreground mb-6\"></i>\n            <h3 className=\"text-xl font-bold text-foreground mb-3\">\n              {filter === 'all' ? 'No Requests Yet' : `No ${filter} Requests`}\n            </h3>\n            <p className=\"text-muted-foreground text-sm mb-8 max-w-sm mx-auto\">\n              {filter === 'all' \n                ? \"Post your first job requirement to get started\" \n                : `You don't have any ${filter} requests`}\n            </p>\n            <Button\n              onClick={() => setLocation('/post-job')}\n              className=\"bg-gradient-purple hover:scale-105 transition-transform duration-200 shadow-lg\"\n              data-testid=\"button-post-first-job\"\n            >\n              <i className=\"fas fa-plus mr-2\"></i>\n              Post Your First Request\n            </Button>\n          </div>\n        ) : (\n          <div className=\"space-y-5\">\n            {filteredLeads.map((lead) => (\n              <div key={lead.id} className=\"bg-card rounded-2xl p-6 shadow-lg border border-border hover:shadow-xl transition-all duration-200\">\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-bold text-card-foreground mb-2\" data-testid={`text-lead-title-${lead.id}`}>\n                      {lead.title}\n                    </h4>\n                    <p className=\"text-sm text-muted-foreground mb-3\">{lead.description}</p>\n                  </div>\n                  <span className={`px-3 py-1.5 rounded-full text-xs font-semibold ${getStatusColor(lead.status)}`}>\n                    <i className={`${getStatusIcon(lead.status)} mr-1`}></i>\n                    {lead.status}\n                  </span>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 mb-4 text-sm text-muted-foreground\">\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-map-marker-alt mr-2 text-primary\"></i>\n                    {lead.location}\n                  </div>\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-rupee-sign mr-2 text-primary\"></i>\n                    ₹{lead.budgetMin}-{lead.budgetMax}\n                  </div>\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-tag mr-2 text-primary\"></i>\n                    {lead.category.name}\n                  </div>\n                  <div className=\"flex items-center\">\n                    <i className=\"fas fa-clock mr-2 text-primary\"></i>\n                    {new Date(lead.createdAt!).toLocaleDateString()}\n                  </div>\n                </div>\n\n                {lead.acceptedByFreelancer && (\n                  <div className=\"bg-blue-50 rounded-lg p-3 mb-3\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-gradient-purple rounded-full flex items-center justify-center text-white font-semibold\">\n                        {lead.acceptedByFreelancer.user.firstName?.[0] || '?'}\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-sm\">\n                          Accepted by {lead.acceptedByFreelancer.user.firstName} {lead.acceptedByFreelancer.user.lastName}\n                        </p>\n                        <p className=\"text-xs text-gray-600\">\n                          {lead.acceptedByFreelancer.user.email}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex space-x-2\">\n                    {lead.status === 'pending' && (\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                        data-testid={`button-cancel-${lead.id}`}\n                      >\n                        <i className=\"fas fa-times mr-1\"></i>\n                        Cancel\n                      </Button>\n                    )}\n                    {lead.status === 'accepted' && (\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-green-600 hover:bg-green-700\"\n                        data-testid={`button-complete-${lead.id}`}\n                      >\n                        <i className=\"fas fa-check mr-1\"></i>\n                        Mark Complete\n                      </Button>\n                    )}\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className=\"text-purple-600\"\n                    data-testid={`button-view-details-${lead.id}`}\n                  >\n                    View Details\n                    <i className=\"fas fa-chevron-right ml-1\"></i>\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Navigation */}\n      <Navigation currentPage=\"requests\" userRole=\"customer\" />\n    </div>\n  );\n}","size_bytes":9257},"client/src/pages/customer-search.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport Navigation from \"@/components/navigation\";\nimport type { Category, FreelancerWithRelations } from \"@shared/schema\";\n\nexport default function CustomerSearch() {\n  const { isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Fetch categories\n  const { data: categories } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    retry: false,\n  });\n\n  // Mock freelancers data for now\n  const freelancers: FreelancerWithRelations[] = [];\n\n  const filteredFreelancers = freelancers.filter(freelancer => {\n    const matchesSearch = !searchQuery || \n      freelancer.user.firstName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      freelancer.user.lastName?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      freelancer.bio?.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesCategory = !selectedCategory || freelancer.categoryId === selectedCategory;\n    \n    return matchesSearch && matchesCategory;\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-4\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <button \n            onClick={() => setLocation('/customer')}\n            className=\"text-white\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left text-lg\"></i>\n          </button>\n          <h1 className=\"text-lg font-semibold\">Search Freelancers</h1>\n          <div></div>\n        </div>\n\n        {/* Search Bar */}\n        <div className=\"relative mb-4\">\n          <Input\n            type=\"text\"\n            placeholder=\"Search freelancers...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"w-full bg-white bg-opacity-90 text-gray-800 px-4 py-3 pl-10 rounded-xl placeholder-gray-500 border-0\"\n            data-testid=\"input-search-freelancers\"\n          />\n          <i className=\"fas fa-search absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\"></i>\n        </div>\n\n        {/* Category Filter */}\n        <div className=\"flex gap-2 overflow-x-auto\">\n          <Button\n            onClick={() => setSelectedCategory(\"\")}\n            variant={selectedCategory === \"\" ? \"secondary\" : \"ghost\"}\n            size=\"sm\"\n            className=\"whitespace-nowrap text-white border-white/20\"\n            data-testid=\"filter-all\"\n          >\n            All Categories\n          </Button>\n          {categories?.map((category) => (\n            <Button\n              key={category.id}\n              onClick={() => setSelectedCategory(category.id)}\n              variant={selectedCategory === category.id ? \"secondary\" : \"ghost\"}\n              size=\"sm\"\n              className=\"whitespace-nowrap text-white border-white/20\"\n              data-testid={`filter-${category.id}`}\n            >\n              {category.name}\n            </Button>\n          ))}\n        </div>\n      </div>\n\n      {/* Freelancers List */}\n      <div className=\"p-4\">\n        {filteredFreelancers.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <i className=\"fas fa-users text-4xl text-gray-300 mb-4\"></i>\n            <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Freelancers Found</h3>\n            <p className=\"text-gray-500 text-sm\">\n              {searchQuery || selectedCategory \n                ? \"Try adjusting your search criteria\" \n                : \"Freelancers will appear here once they join the platform\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {filteredFreelancers.map((freelancer) => (\n              <div key={freelancer.id} className=\"bg-white rounded-xl p-4 shadow-sm border border-gray-100\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-12 h-12 bg-gradient-purple rounded-full flex items-center justify-center text-white font-semibold\">\n                    {freelancer.user.firstName?.[0] || freelancer.user.email?.[0] || '?'}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <h4 className=\"font-semibold text-gray-900\" data-testid={`text-freelancer-name-${freelancer.id}`}>\n                        {freelancer.user.firstName} {freelancer.user.lastName}\n                      </h4>\n                      <div className=\"flex items-center space-x-1\">\n                        <i className=\"fas fa-star text-yellow-400 text-xs\"></i>\n                        <span className=\"text-xs text-gray-600\">{freelancer.rating}</span>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-2\">{freelancer.category.name}</p>\n                    {freelancer.bio && (\n                      <p className=\"text-xs text-gray-500 mb-2\">{freelancer.bio}</p>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-500\">\n                        {freelancer.totalJobs} jobs completed\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-gradient-purple hover:opacity-90\"\n                        data-testid={`button-contact-${freelancer.id}`}\n                      >\n                        Contact\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Bottom Navigation */}\n      <Navigation currentPage=\"search\" userRole=\"customer\" />\n    </div>\n  );\n}","size_bytes":6878},"client/src/pages/freelancer-dashboard.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport LeadCard from \"@/components/lead-card\";\nimport Navigation from \"@/components/navigation\";\nimport type { FreelancerProfile, LeadWithRelations, Subscription } from \"@shared/schema\";\n\nexport default function FreelancerDashboard() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newLeadsCount, setNewLeadsCount] = useState(0);\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Mock data for now since backend API is using different auth\n  const profile: FreelancerProfile = {\n    id: 'mock-freelancer-1',\n    userId: firebaseUser?.uid || 'mock-user',\n    categoryId: '1',\n    workingAreas: ['Mumbai', 'Navi Mumbai'],\n    bio: 'Experienced professional offering quality services',\n    experience: '5 years',\n    isAvailable: true,\n    verificationStatus: 'approved',\n    profileCompletionScore: 85,\n    lastSeen: new Date(),\n    createdAt: new Date(),\n    updatedAt: new Date(),\n  };\n\n  const subscriptions: Subscription[] = [];\n  const availableLeads: LeadWithRelations[] = [\n    {\n      id: 'lead-1',\n      title: 'Home Electrical Repair',\n      description: 'Need to fix electrical issues in kitchen',\n      budgetMin: 2000,\n      budgetMax: 5000,\n      location: 'Bandra, Mumbai',\n      pincode: '400050',\n      categoryId: '1',\n      customerId: 'customer-1',\n      status: 'pending',\n      preferredTime: 'Morning',\n      photos: [],\n      createdAt: new Date(),\n      updatedAt: new Date(),\n      customer: {\n        id: 'customer-1',\n        firstName: 'John',\n        lastName: 'Doe',\n        email: 'john@example.com',\n        role: 'customer' as const,\n        profileImageUrl: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n      category: {\n        id: '1',\n        name: 'Electrical',\n        color: '#FFA500',\n        icon: 'fas fa-bolt',\n        createdAt: new Date(),\n        isActive: true,\n      },\n    },\n  ];\n  const acceptedLeads: LeadWithRelations[] = [];\n  \n  const profileLoading = false;\n  const subscriptionsLoading = false;\n  const availableLeadsLoading = false;\n  const acceptedLeadsLoading = false;\n\n  // Accept lead mutation\n  const acceptLeadMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      await apiRequest('POST', `/api/freelancer/leads/${leadId}/accept`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Lead accepted successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/freelancer/leads/available'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/freelancer/leads/accepted'] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to accept lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Express interest mutation\n  const expressInterestMutation = useMutation({\n    mutationFn: async (leadId: string) => {\n      await apiRequest('POST', `/api/freelancer/leads/${leadId}/interest`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Interest Expressed\",\n        description: \"Your interest has been recorded!\",\n      });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to express interest\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAcceptLead = (leadId: string) => {\n    acceptLeadMutation.mutate(leadId);\n  };\n\n  const handleExpressInterest = (leadId: string) => {\n    expressInterestMutation.mutate(leadId);\n  };\n\n  const handleViewPlans = () => {\n    setLocation('/plans');\n  };\n\n  // Check if user has active lead plan\n  const hasActiveLeadPlan = subscriptions?.some(\n    sub => sub.type === 'lead' && sub.status === 'active' && new Date(sub.endDate) > new Date()\n  );\n\n  // Reset new leads count when viewing available leads\n  useEffect(() => {\n    if (availableLeads) {\n      setNewLeadsCount(0);\n    }\n  }, [availableLeads]);\n\n  if (isLoading || profileLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  // If no profile exists, redirect to profile creation\n  if (!profile) {\n    setLocation('/freelancer/profile-setup');\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background text-foreground\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <h2 className=\"text-xl font-bold mb-1\" data-testid=\"text-freelancer-greeting\">\n              Welcome, {firebaseUser?.displayName || firebaseUser?.email?.split('@')[0] || 'Freelancer'}!\n            </h2>\n            <div className=\"flex items-center space-x-3\">\n              <span className=\"text-purple-100\">Professional Freelancer</span>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"bg-green-400 w-2 h-2 rounded-full\"></span>\n                <span className=\"text-xs text-purple-200\">Available</span>\n              </div>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            {profile.verificationStatus === 'approved' && (\n              <Badge className=\"bg-green-500/20 text-green-300 border-green-500/30\">\n                <i className=\"fas fa-check-circle mr-1\"></i>\n                VERIFIED\n              </Badge>\n            )}\n            <div className=\"relative\">\n              <i className=\"fas fa-bell text-xl opacity-80\"></i>\n              {newLeadsCount > 0 && (\n                <span className=\"absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\" data-testid=\"notification-dot\">\n                  {newLeadsCount}\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-3 gap-3\">\n          <div className=\"bg-white bg-opacity-20 rounded-xl p-3 text-center\">\n            <p className=\"text-2xl font-bold\" data-testid=\"text-new-leads-count\">\n              {availableLeads?.length || 0}\n            </p>\n            <p className=\"text-xs text-purple-100\">New Leads</p>\n          </div>\n          <div className=\"bg-white bg-opacity-20 rounded-xl p-3 text-center\">\n            <p className=\"text-2xl font-bold\">₹0</p>\n            <p className=\"text-xs text-purple-100\">This Month</p>\n          </div>\n          <div className=\"bg-white bg-opacity-20 rounded-xl p-3 text-center\">\n            <p className=\"text-2xl font-bold\">{profile.rating}</p>\n            <p className=\"text-xs text-purple-100\">Rating</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Subscription Status */}\n      <div className=\"p-4\">\n        {hasActiveLeadPlan ? (\n          <div className=\"bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl p-4 mb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold\">Lead Plan Active</h3>\n                <p className=\"text-sm text-green-100\">\n                  Expires on {new Date(\n                    subscriptions?.find(s => s.type === 'lead')?.endDate || ''\n                  ).toLocaleDateString()}\n                </p>\n              </div>\n              <i className=\"fas fa-crown text-xl\"></i>\n            </div>\n          </div>\n        ) : (\n          <Card className=\"bg-yellow-50 border-yellow-200 mb-4\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"font-semibold text-yellow-800\">Upgrade to Lead Plan</h3>\n                  <p className=\"text-sm text-yellow-600\">Accept leads and get customer details</p>\n                </div>\n                <Button \n                  onClick={handleViewPlans}\n                  size=\"sm\"\n                  className=\"bg-yellow-500 hover:bg-yellow-600\"\n                  data-testid=\"button-view-plans\"\n                >\n                  View Plans\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* New Leads */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <h3 className=\"font-semibold text-on-surface\">New Leads</h3>\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-primary text-sm font-medium\">\n              View All\n            </Button>\n          </div>\n\n          {availableLeadsLoading ? (\n            <div className=\"flex justify-center py-8\">\n              <div className=\"spinner\"></div>\n            </div>\n          ) : (\n            <div className=\"space-y-3\">\n              {availableLeads && availableLeads.length > 0 ? (\n                availableLeads.slice(0, 3).map((lead) => (\n                  <LeadCard\n                    key={lead.id}\n                    lead={lead}\n                    canAccept={hasActiveLeadPlan}\n                    onAccept={() => handleAcceptLead(lead.id)}\n                    onExpressInterest={() => handleExpressInterest(lead.id)}\n                    isAccepting={acceptLeadMutation.isPending}\n                    isExpressingInterest={expressInterestMutation.isPending}\n                  />\n                ))\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <i className=\"fas fa-inbox text-4xl mb-4\"></i>\n                  <p>No new leads available</p>\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Button\n            variant=\"outline\"\n            className=\"bg-white border border-gray-200 rounded-xl p-4 text-center hover:shadow-md transition-shadow h-auto flex-col\"\n            data-testid=\"button-analytics\"\n          >\n            <i className=\"fas fa-chart-line text-primary text-xl mb-2\"></i>\n            <p className=\"text-sm font-medium text-gray-700\">Analytics</p>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"bg-white border border-gray-200 rounded-xl p-4 text-center hover:shadow-md transition-shadow h-auto flex-col\"\n            data-testid=\"button-export-data\"\n          >\n            <i className=\"fas fa-download text-primary text-xl mb-2\"></i>\n            <p className=\"text-sm font-medium text-gray-700\">Export Data</p>\n          </Button>\n        </div>\n      </div>\n\n      {/* Bottom Navigation */}\n      <Navigation currentPage=\"dashboard\" userRole=\"freelancer\" />\n    </div>\n  );\n}\n","size_bytes":12469},"client/src/pages/home.tsx":{"content":"import { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function Home() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n\n    if (isAuthenticated && firebaseUser) {\n      // Get the selected role from localStorage\n      const selectedRole = localStorage.getItem('selectedRole') || 'customer';\n      \n      // Redirect to appropriate dashboard based on selected role\n      switch (selectedRole) {\n        case 'freelancer':\n          setLocation('/freelancer');\n          break;\n        case 'admin':\n          setLocation('/admin');\n          break;\n        case 'customer':\n        default:\n          setLocation('/customer');\n          break;\n      }\n    }\n  }, [isAuthenticated, firebaseUser, isLoading, setLocation]);\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  // This component serves as a router - it shouldn't render anything\n  return null;\n}","size_bytes":1249},"client/src/pages/job-posting.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertLeadSchema } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport type { Category } from \"@shared/schema\";\n\nconst jobPostingSchema = insertLeadSchema.omit({\n  customerId: true, // We'll add this programmatically from the current user\n}).extend({\n  budgetMin: z.coerce.number().min(1, \"Minimum budget is required\"),\n  budgetMax: z.coerce.number().min(1, \"Maximum budget is required\"),\n}).refine((data) => data.budgetMax >= data.budgetMin, {\n  message: \"Maximum budget must be greater than or equal to minimum budget\",\n  path: [\"budgetMax\"],\n});\n\ntype JobPostingForm = z.infer<typeof jobPostingSchema>;\n\nexport default function JobPosting() {\n  const { isAuthenticated, isLoading, user } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [currentLocation, setCurrentLocation] = useState<string>(\"\");\n\n  // Get query parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const preSelectedCategory = urlParams.get('category');\n\n  // Redirect to landing if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  // Fetch categories\n  const { data: categories, isLoading: categoriesLoading } = useQuery<Category[]>({\n    queryKey: ['/api/categories'],\n    retry: false,\n  });\n\n  // Form setup\n  const form = useForm<JobPostingForm>({\n    resolver: zodResolver(jobPostingSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      budgetMin: 0,\n      budgetMax: 0,\n      location: \"\",\n      pincode: \"\",\n      preferredTime: \"\",\n      categoryId: preSelectedCategory || \"\",\n      photos: [],\n    },\n  });\n\n  // Create lead mutation\n  const createLeadMutation = useMutation({\n    mutationFn: async (data: JobPostingForm) => {\n      await apiRequest('POST', '/api/customer/leads', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Job posted successfully! Freelancers will be notified.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/customer/leads'] });\n      setLocation('/customer');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to post job\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: JobPostingForm) => {\n    console.log('Form submission data:', data);\n    console.log('Form errors:', form.formState.errors);\n    console.log('Current user:', user);\n    \n    // Check if user is available\n    if (!user || !user.uid) {\n      toast({\n        title: \"Authentication Error\",\n        description: \"Please log in to post a job\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    // Add customerId to the data\n    const submitData = {\n      ...data,\n      customerId: user.uid\n    };\n    \n    console.log('Final submission data with customerId:', submitData);\n    createLeadMutation.mutate(submitData);\n  };\n\n  const handleGoBack = () => {\n    setLocation('/customer');\n  };\n\n  const handleUseCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          // In a real app, you'd reverse geocode these coordinates\n          const location = `${position.coords.latitude.toFixed(4)}, ${position.coords.longitude.toFixed(4)}`;\n          setCurrentLocation(location);\n          form.setValue(\"location\", location);\n          toast({\n            title: \"Location Updated\",\n            description: \"Current location has been set\",\n          });\n        },\n        (error) => {\n          toast({\n            title: \"Location Error\",\n            description: \"Unable to get your current location\",\n            variant: \"destructive\",\n          });\n        }\n      );\n    } else {\n      toast({\n        title: \"Location Not Supported\",\n        description: \"Geolocation is not supported by this browser\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading || categoriesLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground relative\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6 flex items-center\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleGoBack}\n          className=\"mr-4 text-white hover:bg-white/15 p-3 rounded-2xl backdrop-blur-sm\"\n          data-testid=\"button-go-back\"\n        >\n          <i className=\"fas fa-arrow-left text-lg\"></i>\n        </Button>\n        <h2 className=\"text-xl font-bold\">Post Your Requirement</h2>\n      </div>\n\n      {/* Form Content */}\n      <div className=\"p-6 pb-32 bg-background\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Category Selection */}\n            <FormField\n              control={form.control}\n              name=\"categoryId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"block text-sm font-semibold text-foreground mb-2\">\n                    Service Category\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger \n                        className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                        data-testid=\"select-category\"\n                      >\n                        <SelectValue placeholder=\"Select a category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {categories?.map((category) => (\n                        <SelectItem key={category.id} value={category.id}>\n                          {category.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Job Title */}\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"block text-sm font-semibold text-foreground mb-2\">\n                    Job Title\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"e.g., Fix ceiling fan\"\n                      className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                      data-testid=\"input-job-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Description */}\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"block text-sm font-semibold text-foreground mb-2\">\n                    Description\n                  </FormLabel>\n                  <FormControl>\n                    <Textarea\n                      {...field}\n                      rows={4}\n                      placeholder=\"Describe your requirements in detail...\"\n                      className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                      data-testid=\"textarea-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Budget Range */}\n            <div>\n              <FormLabel className=\"block text-sm font-semibold text-foreground mb-3\">\n                Budget Range\n              </FormLabel>\n              <div className=\"grid grid-cols-2 gap-3\">\n                <FormField\n                  control={form.control}\n                  name=\"budgetMin\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"number\"\n                          placeholder=\"Min amount\"\n                          className=\"bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                          data-testid=\"input-budget-min\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"budgetMax\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormControl>\n                        <Input\n                          {...field}\n                          type=\"number\"\n                          placeholder=\"Max amount\"\n                          className=\"bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                          onChange={(e) => field.onChange(Number(e.target.value))}\n                          data-testid=\"input-budget-max\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Location */}\n            <div>\n              <FormLabel className=\"block text-sm font-semibold text-foreground mb-3\">\n                Location\n              </FormLabel>\n              <FormField\n                control={form.control}\n                name=\"location\"\n                render={({ field }) => (\n                  <FormItem>\n                    <div className=\"relative\">\n                      <FormControl>\n                        <Input\n                          {...field}\n                          placeholder=\"Enter your area or pincode\"\n                          className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 pl-12 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                          data-testid=\"input-location\"\n                        />\n                      </FormControl>\n                      <i className=\"fas fa-map-marker-alt absolute left-4 top-1/2 transform -translate-y-1/2 text-muted-foreground\"></i>\n                    </div>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleUseCurrentLocation}\n                className=\"mt-2 text-primary text-sm font-medium flex items-center hover:bg-primary/10\"\n                data-testid=\"button-use-location\"\n              >\n                <i className=\"fas fa-crosshairs mr-1\"></i>\n                Use current location\n              </Button>\n            </div>\n\n            {/* Pincode */}\n            <FormField\n              control={form.control}\n              name=\"pincode\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"block text-sm font-semibold text-foreground mb-2\">\n                    Pincode (Optional)\n                  </FormLabel>\n                  <FormControl>\n                    <Input\n                      {...field}\n                      placeholder=\"Enter pincode\"\n                      className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground placeholder-muted-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                      data-testid=\"input-pincode\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Preferred Time */}\n            <FormField\n              control={form.control}\n              name=\"preferredTime\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel className=\"block text-sm font-semibold text-foreground mb-2\">\n                    Preferred Time\n                  </FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger \n                        className=\"w-full bg-card border border-border rounded-2xl px-4 py-4 text-card-foreground focus:border-primary focus:ring-primary shadow-sm\"\n                        data-testid=\"select-preferred-time\"\n                      >\n                        <SelectValue placeholder=\"Select preferred time\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"asap\">ASAP</SelectItem>\n                      <SelectItem value=\"within_2_hours\">Within 2 hours</SelectItem>\n                      <SelectItem value=\"today\">Today</SelectItem>\n                      <SelectItem value=\"tomorrow\">Tomorrow</SelectItem>\n                      <SelectItem value=\"this_week\">This week</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Photo Upload Placeholder */}\n            <div>\n              <FormLabel className=\"block text-sm font-semibold text-foreground mb-3\">\n                Photos (Optional)\n              </FormLabel>\n              <div className=\"border-2 border-dashed border-border rounded-2xl p-8 text-center bg-card/50 hover:bg-card/70 transition-colors cursor-pointer\">\n                <i className=\"fas fa-camera text-primary text-3xl mb-3\"></i>\n                <p className=\"text-card-foreground text-sm font-medium\">Tap to add photos</p>\n                <p className=\"text-xs text-muted-foreground mt-2\">Photos help freelancers understand your requirements better</p>\n              </div>\n            </div>\n\n          </form>\n        </Form>\n      </div>\n\n      {/* Fixed Submit Button at Bottom */}\n      <div \n        className=\"fixed bottom-0 left-0 right-0 p-6 bg-card/95 backdrop-blur-xl border-t border-border shadow-2xl\"\n        style={{ zIndex: 9999, position: 'fixed', bottom: 0 }}\n      >\n        <button\n          type=\"button\"\n          disabled={createLeadMutation.isPending}\n          onClick={async (e) => {\n            e.preventDefault();\n            console.log('Submit button clicked');\n            console.log('Current form values:', form.getValues());\n            console.log('Form state:', form.formState);\n            \n            // Trigger form validation and submission\n            const isValid = await form.trigger();\n            console.log('Form validation result:', isValid);\n            \n            // Get form data and call onSubmit directly (validation happens inside onSubmit)\n            const formData = form.getValues();\n            onSubmit(formData);\n          }}\n          className=\"w-full bg-gradient-purple text-white py-5 px-6 rounded-2xl font-bold text-lg hover:scale-105 transition-all duration-200 shadow-2xl disabled:opacity-50 disabled:scale-100\"\n          data-testid=\"button-post-job\"\n        >\n          {createLeadMutation.isPending ? (\n            <div className=\"flex items-center justify-center\">\n              <div className=\"w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\"></div>\n              Posting...\n            </div>\n          ) : (\n            <div className=\"flex items-center justify-center\">\n              <i className=\"fas fa-paper-plane mr-2\"></i>\n              Post Your Requirement\n            </div>\n          )}\n        </button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17744},"client/src/pages/landing.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { signInWithGoogle } from \"@/lib/firebase\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\n\nexport default function Landing() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [selectedRole, setSelectedRole] = useState<string | null>(null);\n\n  const handleGoogleLogin = async (role: string) => {\n    try {\n      const user = await signInWithGoogle();\n      console.log(\"User signed in:\", user);\n      \n      // Store the selected role for later use\n      localStorage.setItem('selectedRole', role);\n      \n      toast({\n        title: \"Welcome!\",\n        description: `Successfully signed in as ${role}`,\n      });\n      // Redirect to role selection after successful login\n      setLocation('/');\n    } catch (error) {\n      console.error(\"Login error:\", error);\n      if (error.code === 'auth/popup-closed-by-user') {\n        toast({\n          title: \"Login Cancelled\",\n          description: \"You closed the sign-in window. Please try again.\",\n          variant: \"default\",\n        });\n      } else {\n        toast({\n          title: \"Login Failed\",\n          description: \"Failed to sign in with Google. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const handlePhoneLogin = (role: string) => {\n    // Store the selected role for later use\n    localStorage.setItem('selectedRole', role);\n    setLocation('/phone-auth');\n  };\n\n  const handleRoleSelect = (role: string) => {\n    setSelectedRole(role);\n  };\n\n  const goBack = () => {\n    setSelectedRole(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Hero Section */}\n      <div className=\"bg-gradient-purple text-white p-8 pb-16\">\n        <div className=\"text-center\">\n          <div className=\"w-24 h-24 bg-white bg-opacity-20 rounded-3xl flex items-center justify-center mx-auto mb-8 backdrop-blur-sm\">\n            <i className=\"fas fa-handshake text-4xl\"></i>\n          </div>\n          <h1 className=\"text-3xl font-bold mb-3\" data-testid=\"app-title\">Freelancer Connect</h1>\n          <p className=\"text-purple-100 text-base\">Connect with local service providers</p>\n          <p className=\"text-purple-200 text-sm mt-2\">Find trusted professionals in your area</p>\n        </div>\n      </div>\n\n      {/* Role Selection or Login */}\n      <div className=\"p-6 -mt-8\">\n        <div className=\"bg-card rounded-t-3xl shadow-2xl p-8 border border-border\">\n          {!selectedRole ? (\n            /* Role Selection Screen */\n            <div className=\"space-y-4\">\n              <div className=\"text-center mb-8\">\n                <h2 className=\"text-2xl font-bold text-card-foreground mb-3\">Choose Your Role</h2>\n                <p className=\"text-muted-foreground\">Select how you want to use our platform</p>\n              </div>\n\n              <Card \n                className=\"bg-card/50 backdrop-blur-sm rounded-2xl shadow-lg border border-border cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-200\"\n                onClick={() => handleRoleSelect('customer')}\n                data-testid=\"card-customer-role\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-blue-500/20 rounded-2xl flex items-center justify-center\">\n                      <i className=\"fas fa-search text-blue-400 text-2xl\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-card-foreground text-lg\">For Customers</h3>\n                      <p className=\"text-muted-foreground text-sm\">Find local service providers</p>\n                    </div>\n                    <i className=\"fas fa-chevron-right text-primary\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card \n                className=\"bg-card/50 backdrop-blur-sm rounded-2xl shadow-lg border border-border cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-200\"\n                onClick={() => handleRoleSelect('freelancer')}\n                data-testid=\"card-freelancer-role\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-green-500/20 rounded-2xl flex items-center justify-center\">\n                      <i className=\"fas fa-hammer text-green-400 text-2xl\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-card-foreground text-lg\">For Freelancers</h3>\n                      <p className=\"text-muted-foreground text-sm\">Offer your services locally</p>\n                    </div>\n                    <i className=\"fas fa-chevron-right text-primary\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card \n                className=\"bg-card/50 backdrop-blur-sm rounded-2xl shadow-lg border border-border cursor-pointer hover:shadow-xl hover:scale-105 transition-all duration-200\"\n                onClick={() => handleRoleSelect('admin')}\n                data-testid=\"card-admin-role\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-16 h-16 bg-purple-500/20 rounded-2xl flex items-center justify-center\">\n                      <i className=\"fas fa-cog text-purple-400 text-2xl\"></i>\n                    </div>\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-card-foreground text-lg\">Admin Portal</h3>\n                      <p className=\"text-muted-foreground text-sm\">Manage platform operations</p>\n                    </div>\n                    <i className=\"fas fa-chevron-right text-primary\"></i>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          ) : (\n            /* Login Options for Selected Role */\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center space-x-3 mb-6\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={goBack}\n                  className=\"p-2 rounded-full hover:bg-gray-100\"\n                  data-testid=\"button-back-to-roles\"\n                >\n                  <i className=\"fas fa-arrow-left text-gray-600\"></i>\n                </Button>\n                <div className=\"flex-1\">\n                  <h2 className=\"text-xl font-semibold text-gray-800\">\n                    {selectedRole === 'customer' && 'Customer Login'}\n                    {selectedRole === 'freelancer' && 'Freelancer Login'}\n                    {selectedRole === 'admin' && 'Admin Login'}\n                  </h2>\n                  <p className=\"text-gray-600 text-sm\">\n                    {selectedRole === 'customer' && 'Find and hire local service providers'}\n                    {selectedRole === 'freelancer' && 'Start offering your services locally'}\n                    {selectedRole === 'admin' && 'Access platform management tools'}\n                  </p>\n                </div>\n              </div>\n\n              {/* Role-specific login card */}\n              <Card className=\"bg-card/50 backdrop-blur-sm rounded-2xl shadow-xl border border-border\">\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-8\">\n                    <div className={`w-20 h-20 rounded-2xl flex items-center justify-center mx-auto mb-6 ${\n                      selectedRole === 'customer' ? 'bg-blue-500/20' :\n                      selectedRole === 'freelancer' ? 'bg-green-500/20' : 'bg-purple-500/20'\n                    }`}>\n                      <i className={`text-3xl ${\n                        selectedRole === 'customer' ? 'fas fa-search text-blue-400' :\n                        selectedRole === 'freelancer' ? 'fas fa-hammer text-green-400' : 'fas fa-cog text-purple-400'\n                      }`}></i>\n                    </div>\n                    <h3 className=\"text-xl font-bold text-card-foreground mb-3\">Welcome!</h3>\n                    <p className=\"text-muted-foreground\">Choose your preferred sign-in method</p>\n                  </div>\n\n                  <div className=\"space-y-5\">\n                    <Button \n                      onClick={() => handleGoogleLogin(selectedRole)}\n                      className=\"w-full bg-gradient-purple text-white py-4 rounded-2xl font-semibold hover:scale-105 transition-all duration-200 shadow-lg\"\n                      data-testid=\"button-google-login\"\n                    >\n                      <div className=\"flex items-center justify-center space-x-3\">\n                        <svg className=\"w-5 h-5\" viewBox=\"0 0 24 24\">\n                          <path fill=\"white\" d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\"/>\n                          <path fill=\"white\" d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\"/>\n                          <path fill=\"white\" d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\"/>\n                          <path fill=\"white\" d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\"/>\n                        </svg>\n                        <span>Continue with Google</span>\n                      </div>\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\"\n                      onClick={() => handlePhoneLogin(selectedRole)}\n                      className=\"w-full border-2 border-border bg-card text-card-foreground py-4 rounded-2xl font-semibold hover:scale-105 hover:shadow-lg transition-all duration-200\"\n                      data-testid=\"button-phone-login\"\n                    >\n                      <div className=\"flex items-center justify-center space-x-3\">\n                        <i className=\"fas fa-phone text-primary\"></i>\n                        <span>Continue with Phone</span>\n                      </div>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"text-center mt-6\">\n                <p className=\"text-xs text-muted-foreground\">\n                  By continuing, you agree to our Terms of Service and Privacy Policy\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11334},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/phone-auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport { setupRecaptcha, sendOTP, verifyOTP } from \"@/lib/firebase\";\nimport type { ConfirmationResult } from \"firebase/auth\";\n\nexport default function PhoneAuth() {\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [confirmationResult, setConfirmationResult] = useState<ConfirmationResult | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [step, setStep] = useState<\"phone\" | \"otp\">(\"phone\");\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Initialize reCAPTCHA\n    if (typeof window !== 'undefined') {\n      const recaptcha = setupRecaptcha('recaptcha-container');\n      (window as any).recaptchaVerifier = recaptcha;\n    }\n  }, []);\n\n  const handleSendOTP = async () => {\n    if (!phoneNumber) {\n      toast({\n        title: \"Invalid Phone Number\",\n        description: \"Please enter a valid phone number\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const recaptcha = (window as any).recaptchaVerifier;\n      const confirmation = await sendOTP(phoneNumber, recaptcha);\n      setConfirmationResult(confirmation);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your phone for the verification code\",\n      });\n    } catch (error: any) {\n      console.error(\"Error sending OTP:\", error);\n      toast({\n        title: \"Failed to Send OTP\",\n        description: error.message || \"Please try again\",\n        variant: \"destructive\",\n      });\n      // Reset reCAPTCHA if needed\n      if ((window as any).recaptchaVerifier) {\n        (window as any).recaptchaVerifier.clear();\n        const recaptcha = setupRecaptcha('recaptcha-container');\n        (window as any).recaptchaVerifier = recaptcha;\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyOTP = async () => {\n    if (!otp || otp.length < 6) {\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please enter the 6-digit verification code\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsLoading(true);\n    try {\n      const user = await verifyOTP(confirmationResult, otp);\n      console.log(\"User signed in with phone:\", user);\n      toast({\n        title: \"Welcome!\",\n        description: \"Successfully signed in with phone number\",\n      });\n      setLocation('/');\n    } catch (error: any) {\n      console.error(\"Error verifying OTP:\", error);\n      toast({\n        title: \"Invalid OTP\",\n        description: \"Please check the code and try again\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const goBack = () => {\n    if (step === \"otp\") {\n      setStep(\"phone\");\n      setOtp(\"\");\n    } else {\n      setLocation('/');\n    }\n  };\n\n  const formatPhoneNumber = (value: string) => {\n    // Remove all non-digit characters\n    const digits = value.replace(/\\D/g, '');\n    \n    // Add Indian country code if not present\n    if (digits.length > 0 && !digits.startsWith('91')) {\n      return '+91' + digits;\n    } else if (digits.startsWith('91')) {\n      return '+' + digits;\n    }\n    return '+91';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-4\">\n        <div className=\"flex items-center space-x-3\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={goBack}\n            className=\"text-white hover:bg-white/20 p-2 rounded-full\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left text-lg\"></i>\n          </Button>\n          <h1 className=\"text-lg font-semibold\">\n            {step === \"phone\" ? \"Enter Phone Number\" : \"Verify Code\"}\n          </h1>\n        </div>\n      </div>\n\n      <div className=\"p-6\">\n        <Card className=\"bg-white rounded-2xl shadow-lg border border-gray-100\">\n          <CardContent className=\"p-6\">\n            {step === \"phone\" ? (\n              <div className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-mobile-alt text-blue-600 text-2xl\"></i>\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Enter Phone Number</h2>\n                  <p className=\"text-gray-600 text-sm\">We'll send you a verification code</p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Phone Number\n                    </label>\n                    <Input\n                      type=\"tel\"\n                      placeholder=\"+91 98765 43210\"\n                      value={phoneNumber}\n                      onChange={(e) => setPhoneNumber(formatPhoneNumber(e.target.value))}\n                      className=\"w-full text-lg\"\n                      data-testid=\"input-phone-number\"\n                    />\n                  </div>\n\n                  <Button\n                    onClick={handleSendOTP}\n                    disabled={isLoading || !phoneNumber}\n                    className=\"w-full bg-primary hover:bg-primary/90 text-white py-3 rounded-xl font-medium\"\n                    data-testid=\"button-send-otp\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Sending...</span>\n                      </div>\n                    ) : (\n                      \"Send Verification Code\"\n                    )}\n                  </Button>\n                </div>\n              </div>\n            ) : (\n              <div className=\"space-y-6\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <i className=\"fas fa-shield-alt text-green-600 text-2xl\"></i>\n                  </div>\n                  <h2 className=\"text-xl font-semibold text-gray-800 mb-2\">Enter Verification Code</h2>\n                  <p className=\"text-gray-600 text-sm\">\n                    We sent a 6-digit code to<br />\n                    <span className=\"font-medium\">{phoneNumber}</span>\n                  </p>\n                </div>\n\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Verification Code\n                    </label>\n                    <Input\n                      type=\"text\"\n                      placeholder=\"123456\"\n                      value={otp}\n                      onChange={(e) => setOtp(e.target.value.replace(/\\D/g, '').slice(0, 6))}\n                      className=\"w-full text-lg text-center tracking-widest\"\n                      maxLength={6}\n                      data-testid=\"input-otp\"\n                    />\n                  </div>\n\n                  <Button\n                    onClick={handleVerifyOTP}\n                    disabled={isLoading || otp.length < 6}\n                    className=\"w-full bg-primary hover:bg-primary/90 text-white py-3 rounded-xl font-medium\"\n                    data-testid=\"button-verify-otp\"\n                  >\n                    {isLoading ? (\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n                        <span>Verifying...</span>\n                      </div>\n                    ) : (\n                      \"Verify Code\"\n                    )}\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setStep(\"phone\")}\n                    className=\"w-full\"\n                    data-testid=\"button-change-number\"\n                  >\n                    Change Phone Number\n                  </Button>\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {step === \"phone\" && (\n          <div className=\"mt-6 text-center\">\n            <p className=\"text-xs text-gray-500\">\n              By continuing, you agree to our Terms of Service and Privacy Policy\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* reCAPTCHA container */}\n      <div id=\"recaptcha-container\"></div>\n    </div>\n  );\n}","size_bytes":9381},"client/src/pages/profile.tsx":{"content":"import { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { signOutUser } from \"@/lib/firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Navigation from \"@/components/navigation\";\nimport { CircularProgress } from \"@/components/CircularProgress\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { insertFreelancerProfileSchema, type InsertFreelancerProfileForm } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Clock, MapPin, DollarSign, Star, Upload, Camera, FileText, Award, Shield } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isEditing, setIsEditing] = useState(false);\n  const [profilePhoto, setProfilePhoto] = useState<string>(\"\");\n  const [portfolioImages, setPortfolioImages] = useState<string[]>([]);\n  const [idProofUrl, setIdProofUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  const handleLogout = async () => {\n    try {\n      await signOutUser();\n      localStorage.removeItem('selectedRole');\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      setLocation('/');\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      toast({\n        title: \"Logout failed\",\n        description: \"Failed to log out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getUserRole = () => {\n    return localStorage.getItem('selectedRole') || 'customer';\n  };\n\n  const getUserName = () => {\n    if (firebaseUser?.displayName) {\n      return firebaseUser.displayName;\n    }\n    if (firebaseUser?.email) {\n      return firebaseUser.email.split('@')[0];\n    }\n    return 'User';\n  };\n\n  const getUserEmail = () => {\n    return firebaseUser?.email || '';\n  };\n\n  // Mock profile data for demonstration\n  const mockProfile: InsertFreelancerProfileForm = {\n    userId: firebaseUser?.uid || '',\n    categoryId: '1',\n    professionalTitle: 'Senior Electrician',\n    profilePhotoUrl: profilePhoto,\n    workingAreas: ['Mumbai', 'Navi Mumbai', 'Thane'],\n    bio: 'Experienced electrician with 8+ years of expertise in residential and commercial electrical work.',\n    experience: '8',\n    experienceDescription: 'Started as an apprentice and worked my way up to handling complex electrical installations, maintenance, and repairs for both residential and commercial properties.',\n    skills: ['Electrical Installation', 'Circuit Repair', 'LED Installation', 'Panel Upgrades', 'Troubleshooting'],\n    portfolioImages: portfolioImages,\n    certifications: ['Licensed Electrician', 'Safety Training Certificate'],\n    idProofUrl: idProofUrl,\n    hourlyRate: '₹500-800',\n    verificationStatus: 'approved',\n    isAvailable: true,\n    availabilitySchedule: {\n      monday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      tuesday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      wednesday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      thursday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      friday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      saturday: { available: true, hours: '10:00 AM - 4:00 PM' },\n      sunday: { available: false, hours: 'Closed' }\n    },\n    verificationDocs: []\n  };\n\n  // Form setup\n  const form = useForm<InsertFreelancerProfileForm>({\n    resolver: zodResolver(insertFreelancerProfileSchema),\n    defaultValues: mockProfile,\n  });\n\n  // Calculate profile completion score\n  const calculateProfileCompletion = (profile: InsertFreelancerProfileForm): number => {\n    const requiredFields = [\n      'professionalTitle',\n      'bio', \n      'experience',\n      'workingAreas',\n      'hourlyRate'\n    ];\n    \n    const optionalFields = [\n      'profilePhotoUrl',\n      'experienceDescription', \n      'skills',\n      'portfolioImages',\n      'certifications',\n      'idProofUrl',\n      'availabilitySchedule'\n    ];\n\n    let score = 0;\n    const totalFields = requiredFields.length + optionalFields.length;\n\n    // Required fields (70% weight)\n    requiredFields.forEach(field => {\n      const value = profile[field as keyof InsertFreelancerProfileForm];\n      if (value && (Array.isArray(value) ? value.length > 0 : value.toString().trim())) {\n        score += 70 / requiredFields.length;\n      }\n    });\n\n    // Optional fields (30% weight) \n    optionalFields.forEach(field => {\n      const value = profile[field as keyof InsertFreelancerProfileForm];\n      if (value && (Array.isArray(value) ? value.length > 0 : value.toString().trim())) {\n        score += 30 / optionalFields.length;\n      }\n    });\n\n    return Math.round(score);\n  };\n\n  const currentProfile = form.watch();\n  const completionScore = calculateProfileCompletion(currentProfile);\n\n  // Field completion status\n  const getFieldStatus = (fieldName: keyof InsertFreelancerProfileForm) => {\n    const value = currentProfile[fieldName];\n    return value && (Array.isArray(value) ? value.length > 0 : value.toString().trim());\n  };\n\n  // Upload handlers\n  const handleGetUploadParameters = async () => {\n    // Mock upload URL for demo - in real app this would call the backend\n    return {\n      method: 'PUT' as const,\n      url: 'https://example.com/upload',\n    };\n  };\n\n  const handleProfilePhotoUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful[0]?.uploadURL) {\n      const photoUrl = result.successful[0].uploadURL;\n      setProfilePhoto(photoUrl);\n      form.setValue('profilePhotoUrl', photoUrl);\n      toast({\n        title: \"Profile photo uploaded\",\n        description: \"Your profile photo has been updated successfully.\",\n      });\n    }\n  };\n\n  const handlePortfolioUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const newImages = result.successful.map(file => file.uploadURL || '').filter(Boolean);\n      const updatedImages = [...portfolioImages, ...newImages];\n      setPortfolioImages(updatedImages);\n      form.setValue('portfolioImages', updatedImages);\n      toast({\n        title: \"Portfolio images uploaded\",\n        description: `${newImages.length} image(s) added to your portfolio.`,\n      });\n    }\n  };\n\n  const handleIdProofUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful[0]?.uploadURL) {\n      const docUrl = result.successful[0].uploadURL;\n      setIdProofUrl(docUrl);\n      form.setValue('idProofUrl', docUrl);\n      toast({\n        title: \"ID proof uploaded\",\n        description: \"Your ID verification document has been uploaded successfully.\",\n      });\n    }\n  };\n\n  const onSubmit = async (data: InsertFreelancerProfileForm) => {\n    try {\n      // In real app, this would save to the backend\n      console.log('Profile data:', data);\n      toast({\n        title: \"Profile updated\",\n        description: \"Your freelancer profile has been updated successfully.\",\n      });\n      setIsEditing(false);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const goBack = () => {\n    const role = getUserRole();\n    switch (role) {\n      case 'freelancer':\n        setLocation('/freelancer');\n        break;\n      case 'admin':\n        setLocation('/admin');\n        break;\n      case 'customer':\n      default:\n        setLocation('/customer');\n        break;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background pb-20\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <button \n            onClick={goBack}\n            className=\"w-12 h-12 bg-white bg-opacity-20 rounded-2xl flex items-center justify-center hover:bg-white/30 transition-colors\"\n            data-testid=\"button-back\"\n          >\n            <i className=\"fas fa-arrow-left text-lg\"></i>\n          </button>\n          <h1 className=\"text-xl font-bold\">Profile</h1>\n          <div className=\"w-12 h-12\"></div> {/* Spacer for alignment */}\n        </div>\n      </div>\n\n      {/* Profile Content */}\n      <div className=\"p-6 -mt-4\">\n        <Card className=\"bg-card rounded-2xl shadow-xl border border-border mb-6\">\n          <CardContent className=\"p-8\">\n            {/* Profile Picture */}\n            <div className=\"flex items-center space-x-6 mb-8\">\n              <div className=\"w-24 h-24 bg-gradient-purple rounded-2xl flex items-center justify-center\">\n                {firebaseUser?.photoURL ? (\n                  <img \n                    src={firebaseUser.photoURL} \n                    alt=\"Profile\" \n                    className=\"w-24 h-24 rounded-2xl object-cover\"\n                  />\n                ) : (\n                  <i className=\"fas fa-user text-white text-3xl\"></i>\n                )}\n              </div>\n              <div className=\"flex-1\">\n                <h2 className=\"text-2xl font-bold text-card-foreground mb-1\" data-testid=\"text-user-name\">\n                  {getUserName()}\n                </h2>\n                <p className=\"text-muted-foreground capitalize mb-3\" data-testid=\"text-user-role\">\n                  {getUserRole()}\n                </p>\n                <Button\n                  onClick={() => setIsEditing(!isEditing)}\n                  variant=\"outline\"\n                  size=\"sm\"\n                  className=\"border-border hover:bg-card/50\"\n                  data-testid=\"button-edit-profile\"\n                >\n                  <i className=\"fas fa-edit mr-2\"></i>\n                  {isEditing ? 'Cancel' : 'Edit Profile'}\n                </Button>\n              </div>\n            </div>\n\n            {/* Profile Details */}\n            <div className=\"space-y-6\">\n              <div>\n                <Label htmlFor=\"email\" className=\"text-sm font-semibold text-card-foreground mb-2 block\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={getUserEmail()}\n                  disabled={!isEditing}\n                  className=\"bg-background border-border text-foreground rounded-2xl\"\n                  data-testid=\"input-email\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"firstName\" className=\"text-sm font-semibold text-card-foreground mb-2 block\">Full Name</Label>\n                <Input\n                  id=\"firstName\"\n                  type=\"text\"\n                  value={getUserName()}\n                  disabled={!isEditing}\n                  className=\"bg-background border-border text-foreground rounded-2xl\"\n                  data-testid=\"input-first-name\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"role\" className=\"text-sm font-semibold text-card-foreground mb-2 block\">Role</Label>\n                <Input\n                  id=\"role\"\n                  type=\"text\"\n                  value={getUserRole()}\n                  disabled\n                  className=\"bg-muted border-border text-muted-foreground rounded-2xl capitalize\"\n                  data-testid=\"input-role\"\n                />\n              </div>\n            </div>\n\n            {isEditing && (\n              <div className=\"mt-6 flex space-x-3\">\n                <Button \n                  className=\"flex-1 bg-purple-600 hover:bg-purple-700\"\n                  data-testid=\"button-save-profile\"\n                >\n                  <i className=\"fas fa-save mr-2\"></i>\n                  Save Changes\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setIsEditing(false)}\n                  data-testid=\"button-cancel-edit\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Account Actions */}\n        <Card className=\"bg-card rounded-2xl shadow-xl border border-border mb-6\">\n          <CardContent className=\"p-8\">\n            <h3 className=\"font-bold text-card-foreground mb-6\">Account Settings</h3>\n            \n            <div className=\"space-y-4\">\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-left p-4 h-auto hover:bg-card/50 rounded-2xl\"\n                onClick={() => setLocation('/plans')}\n                data-testid=\"button-subscription-plans\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-blue-500/20 rounded-2xl flex items-center justify-center\">\n                    <i className=\"fas fa-crown text-blue-400\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-card-foreground\">Subscription Plans</div>\n                    <div className=\"text-sm text-muted-foreground\">Manage your subscription</div>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n                </div>\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-left p-4 h-auto hover:bg-card/50 rounded-2xl\"\n                data-testid=\"button-notifications\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-green-500/20 rounded-2xl flex items-center justify-center\">\n                    <i className=\"fas fa-bell text-green-400\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-card-foreground\">Notifications</div>\n                    <div className=\"text-sm text-muted-foreground\">Manage notification preferences</div>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n                </div>\n              </Button>\n\n              <Button\n                variant=\"ghost\"\n                className=\"w-full justify-start text-left p-4 h-auto hover:bg-card/50 rounded-2xl\"\n                data-testid=\"button-privacy\"\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-12 h-12 bg-purple-500/20 rounded-2xl flex items-center justify-center\">\n                    <i className=\"fas fa-shield-alt text-purple-400\"></i>\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-semibold text-card-foreground\">Privacy & Security</div>\n                    <div className=\"text-sm text-muted-foreground\">Manage privacy settings</div>\n                  </div>\n                  <i className=\"fas fa-chevron-right text-muted-foreground\"></i>\n                </div>\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logout */}\n        <Card className=\"bg-card rounded-2xl shadow-xl border border-border\">\n          <CardContent className=\"p-8\">\n            <Button\n              onClick={handleLogout}\n              variant=\"ghost\"\n              className=\"w-full justify-start text-left p-4 h-auto text-red-400 hover:bg-red-500/20 rounded-2xl\"\n              data-testid=\"button-logout\"\n            >\n              <div className=\"flex items-center space-x-4\">\n                <div className=\"w-12 h-12 bg-red-500/20 rounded-2xl flex items-center justify-center\">\n                  <i className=\"fas fa-sign-out-alt text-red-400\"></i>\n                </div>\n                <div className=\"flex-1\">\n                  <div className=\"font-semibold\">Logout</div>\n                  <div className=\"text-sm text-muted-foreground\">Sign out of your account</div>\n                </div>\n              </div>\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Bottom Navigation */}\n      <Navigation />\n    </div>\n  );\n}","size_bytes":17673},"client/src/pages/subscription-plans.tsx":{"content":"import { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport type { Subscription } from \"@shared/schema\";\n\nexport default function SubscriptionPlans() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Redirect to login if not authenticated\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  // Fetch current subscriptions\n  const { data: subscriptions, isLoading: subscriptionsLoading } = useQuery<Subscription[]>({\n    queryKey: ['/api/freelancer/subscriptions'],\n    retry: false,\n    enabled: isAuthenticated,\n  });\n\n  // Subscribe mutation\n  const subscribeMutation = useMutation({\n    mutationFn: async (subscriptionData: {\n      type: 'lead' | 'position' | 'badge';\n      amount: number;\n      endDate: string;\n      position?: number;\n      badgeType?: 'verified' | 'trusted';\n    }) => {\n      await apiRequest('POST', '/api/freelancer/subscriptions', subscriptionData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Subscription activated successfully!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/freelancer/subscriptions'] });\n    },\n    onError: (error: any) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to subscribe\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGoBack = () => {\n    setLocation('/freelancer');\n  };\n\n  const handleSubscribe = (type: 'lead' | 'position' | 'badge', amount: number, duration: 'monthly' | 'quarterly' | 'yearly' = 'monthly') => {\n    const durationMonths = duration === 'monthly' ? 1 : duration === 'quarterly' ? 3 : 12;\n    const endDate = new Date();\n    endDate.setMonth(endDate.getMonth() + durationMonths);\n\n    subscribeMutation.mutate({\n      type,\n      amount,\n      endDate: endDate.toISOString(),\n    });\n  };\n\n  const handlePositionSubscribe = (position: number, amount: number) => {\n    const endDate = new Date();\n    endDate.setMonth(endDate.getMonth() + 1); // Position plans are monthly\n\n    subscribeMutation.mutate({\n      type: 'position',\n      amount,\n      endDate: endDate.toISOString(),\n      position,\n    });\n  };\n\n  const handleBadgeSubscribe = (badgeType: 'verified' | 'trusted', amount: number) => {\n    const endDate = new Date();\n    endDate.setMonth(endDate.getMonth() + 12); // Badge plans are yearly\n\n    subscribeMutation.mutate({\n      type: 'badge',\n      amount,\n      endDate: endDate.toISOString(),\n      badgeType,\n    });\n  };\n\n  const hasActiveSubscription = (type: string) => {\n    return subscriptions?.some(\n      sub => sub.type === type && sub.status === 'active' && new Date(sub.endDate) > new Date()\n    );\n  };\n\n  if (isLoading || subscriptionsLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"spinner\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-4 flex items-center\">\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleGoBack}\n          className=\"mr-4 text-white hover:bg-white/10\"\n          data-testid=\"button-go-back\"\n        >\n          <i className=\"fas fa-arrow-left text-lg\"></i>\n        </Button>\n        <h2 className=\"text-lg font-semibold\">Subscription Plans</h2>\n      </div>\n\n      {/* Plans Content */}\n      <div className=\"p-4 pb-20\">\n        {/* Lead Plan */}\n        <Card className=\"bg-white rounded-2xl shadow-lg p-6 mb-4 border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-on-surface\">Lead Plan</h3>\n              <p className=\"text-gray-600 text-sm\">Accept unlimited leads</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-bolt text-primary text-2xl\"></i>\n              {hasActiveSubscription('lead') && (\n                <Badge className=\"badge-verified\">ACTIVE</Badge>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"space-y-3 mb-6\">\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Accept leads instantly</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Get customer contact details</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Real-time notifications</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-2 mb-4\">\n            <div className=\"text-center p-3 border border-gray-200 rounded-xl\">\n              <p className=\"font-bold text-primary\">₹299</p>\n              <p className=\"text-xs text-gray-500\">Monthly</p>\n            </div>\n            <div className=\"text-center p-3 border-2 border-primary rounded-xl bg-primary bg-opacity-10\">\n              <p className=\"font-bold text-primary\">₹599</p>\n              <p className=\"text-xs text-gray-500\">Quarterly</p>\n            </div>\n            <div className=\"text-center p-3 border border-gray-200 rounded-xl\">\n              <p className=\"font-bold text-primary\">₹999</p>\n              <p className=\"text-xs text-gray-500\">Yearly</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-3 gap-2\">\n            <Button\n              onClick={() => handleSubscribe('lead', 299, 'monthly')}\n              disabled={subscribeMutation.isPending || hasActiveSubscription('lead')}\n              variant=\"outline\"\n              size=\"sm\"\n              data-testid=\"button-subscribe-lead-monthly\"\n            >\n              {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Monthly'}\n            </Button>\n            <Button\n              onClick={() => handleSubscribe('lead', 599, 'quarterly')}\n              disabled={subscribeMutation.isPending || hasActiveSubscription('lead')}\n              className=\"bg-gradient-purple text-white\"\n              size=\"sm\"\n              data-testid=\"button-subscribe-lead-quarterly\"\n            >\n              {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Quarterly'}\n            </Button>\n            <Button\n              onClick={() => handleSubscribe('lead', 999, 'yearly')}\n              disabled={subscribeMutation.isPending || hasActiveSubscription('lead')}\n              variant=\"outline\"\n              size=\"sm\"\n              data-testid=\"button-subscribe-lead-yearly\"\n            >\n              {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Yearly'}\n            </Button>\n          </div>\n        </Card>\n\n        {/* Position Plan */}\n        <Card className=\"bg-white rounded-2xl shadow-lg p-6 mb-4 border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-on-surface\">Position Plan</h3>\n              <p className=\"text-gray-600 text-sm\">Top ranking in search results</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-crown text-warning text-2xl\"></i>\n              {hasActiveSubscription('position') && (\n                <Badge className=\"badge-trusted\">ACTIVE</Badge>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"space-y-3 mb-6\">\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Top 3 position guarantee</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Category & area specific</span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <i className=\"fas fa-check text-success\"></i>\n              <span className=\"text-sm text-gray-700\">Priority lead notifications</span>\n            </div>\n          </div>\n\n          <div className=\"space-y-2 mb-4\">\n            <div className=\"flex justify-between items-center p-3 border border-gray-200 rounded-xl\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm font-medium\">#1 Position</span>\n                <Badge className=\"bg-yellow-500 text-white text-xs\">BEST</Badge>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-bold text-primary\">₹1,999</span>\n                <Button\n                  onClick={() => handlePositionSubscribe(1, 1999)}\n                  disabled={subscribeMutation.isPending}\n                  size=\"sm\"\n                  data-testid=\"button-subscribe-position-1\"\n                >\n                  {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Subscribe'}\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center p-3 border border-gray-200 rounded-xl\">\n              <span className=\"text-sm font-medium\">#2 Position</span>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-bold text-primary\">₹999</span>\n                <Button\n                  onClick={() => handlePositionSubscribe(2, 999)}\n                  disabled={subscribeMutation.isPending}\n                  size=\"sm\"\n                  data-testid=\"button-subscribe-position-2\"\n                >\n                  {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Subscribe'}\n                </Button>\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center p-3 border border-gray-200 rounded-xl\">\n              <span className=\"text-sm font-medium\">#3 Position</span>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"font-bold text-primary\">₹699</span>\n                <Button\n                  onClick={() => handlePositionSubscribe(3, 699)}\n                  disabled={subscribeMutation.isPending}\n                  size=\"sm\"\n                  data-testid=\"button-subscribe-position-3\"\n                >\n                  {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Subscribe'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n\n        {/* Badge Plan */}\n        <Card className=\"bg-white rounded-2xl shadow-lg p-6 border border-gray-100\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div>\n              <h3 className=\"text-xl font-bold text-on-surface\">Badge Plan</h3>\n              <p className=\"text-gray-600 text-sm\">Build trust with verification</p>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-shield-alt text-success text-2xl\"></i>\n              {hasActiveSubscription('badge') && (\n                <Badge className=\"badge-verified\">ACTIVE</Badge>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <div className=\"text-center p-4 border border-gray-200 rounded-xl\">\n              <i className=\"fas fa-check-circle text-blue-500 text-2xl mb-2\"></i>\n              <h4 className=\"font-semibold text-sm\">Verified</h4>\n              <p className=\"text-xs text-gray-500 mb-2\">Basic verification badge</p>\n              <p className=\"text-primary font-bold mt-2\">₹299</p>\n              <Button\n                onClick={() => handleBadgeSubscribe('verified', 299)}\n                disabled={subscribeMutation.isPending}\n                size=\"sm\"\n                className=\"w-full mt-2\"\n                data-testid=\"button-subscribe-badge-verified\"\n              >\n                {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Subscribe'}\n              </Button>\n            </div>\n            <div className=\"text-center p-4 border border-gray-200 rounded-xl\">\n              <i className=\"fas fa-star text-warning text-2xl mb-2\"></i>\n              <h4 className=\"font-semibold text-sm\">Trusted</h4>\n              <p className=\"text-xs text-gray-500 mb-2\">Premium trust badge</p>\n              <p className=\"text-primary font-bold mt-2\">₹999</p>\n              <Button\n                onClick={() => handleBadgeSubscribe('trusted', 999)}\n                disabled={subscribeMutation.isPending}\n                size=\"sm\"\n                className=\"w-full mt-2\"\n                data-testid=\"button-subscribe-badge-trusted\"\n              >\n                {subscribeMutation.isPending ? <div className=\"spinner\"></div> : 'Subscribe'}\n              </Button>\n            </div>\n          </div>\n        </Card>\n\n        {/* Current Subscriptions */}\n        {subscriptions && subscriptions.length > 0 && (\n          <div className=\"mt-6\">\n            <h3 className=\"font-semibold text-on-surface mb-3\">Your Active Subscriptions</h3>\n            <div className=\"space-y-2\">\n              {subscriptions.map((subscription) => (\n                <Card key={subscription.id} className=\"p-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p className=\"font-medium text-sm capitalize\">\n                        {subscription.type} Plan\n                        {subscription.position && ` - Position #${subscription.position}`}\n                        {subscription.badgeType && ` - ${subscription.badgeType}`}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        Expires: {new Date(subscription.endDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <Badge \n                      className={subscription.status === 'active' ? 'badge-verified' : 'bg-gray-500'}\n                    >\n                      {subscription.status}\n                    </Badge>\n                  </div>\n                </Card>\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":16031},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/freelancer-profile.tsx":{"content":"import { useFirebaseAuth } from \"@/hooks/useFirebaseAuth\";\nimport { signOutUser } from \"@/lib/firebase\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useEffect, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useLocation } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport Navigation from \"@/components/navigation\";\nimport { CircularProgress } from \"@/components/CircularProgress\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport { insertFreelancerProfileSchema, type InsertFreelancerProfileForm } from \"@shared/schema\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Clock, MapPin, DollarSign, Star, Upload, Camera, FileText, Award, Shield } from \"lucide-react\";\n\nexport default function FreelancerProfile() {\n  const { user: firebaseUser, isAuthenticated, isLoading } = useFirebaseAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [profilePhoto, setProfilePhoto] = useState<string>(\"\");\n  const [portfolioImages, setPortfolioImages] = useState<string[]>([]);\n  const [idProofUrl, setIdProofUrl] = useState<string>(\"\");\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/');\n      return;\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  const handleLogout = async () => {\n    try {\n      await signOutUser();\n      localStorage.removeItem('selectedRole');\n      toast({\n        title: \"Logged out\",\n        description: \"You have been successfully logged out.\",\n      });\n      setLocation('/');\n    } catch (error) {\n      console.error(\"Logout error:\", error);\n      toast({\n        title: \"Logout failed\",\n        description: \"Failed to log out. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getUserRole = () => {\n    return localStorage.getItem('selectedRole') || 'customer';\n  };\n\n  const getUserName = () => {\n    if (firebaseUser?.displayName) {\n      return firebaseUser.displayName;\n    }\n    if (firebaseUser?.email) {\n      return firebaseUser.email.split('@')[0];\n    }\n    return 'User';\n  };\n\n  // Mock profile data for demonstration\n  const mockProfile: InsertFreelancerProfileForm = {\n    userId: firebaseUser?.uid || '',\n    categoryId: '1',\n    professionalTitle: 'Senior Electrician',\n    profilePhotoUrl: profilePhoto,\n    workingAreas: ['Mumbai', 'Navi Mumbai', 'Thane'],\n    bio: 'Experienced electrician with 8+ years of expertise in residential and commercial electrical work.',\n    experience: '8',\n    experienceDescription: 'Started as an apprentice and worked my way up to handling complex electrical installations, maintenance, and repairs for both residential and commercial properties.',\n    skills: ['Electrical Installation', 'Circuit Repair', 'LED Installation', 'Panel Upgrades', 'Troubleshooting'],\n    portfolioImages: portfolioImages,\n    certifications: ['Licensed Electrician', 'Safety Training Certificate'],\n    idProofUrl: idProofUrl,\n    hourlyRate: '₹500-800',\n    verificationStatus: 'approved',\n    isAvailable: true,\n    availabilitySchedule: {\n      monday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      tuesday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      wednesday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      thursday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      friday: { available: true, hours: '9:00 AM - 6:00 PM' },\n      saturday: { available: true, hours: '10:00 AM - 4:00 PM' },\n      sunday: { available: false, hours: 'Closed' }\n    },\n    verificationDocs: []\n  };\n\n  // Form setup\n  const form = useForm<InsertFreelancerProfileForm>({\n    resolver: zodResolver(insertFreelancerProfileSchema),\n    defaultValues: mockProfile,\n  });\n\n  // Calculate profile completion score\n  const calculateProfileCompletion = (profile: InsertFreelancerProfileForm): number => {\n    const requiredFields = [\n      'professionalTitle',\n      'bio', \n      'experience',\n      'workingAreas',\n      'hourlyRate'\n    ];\n    \n    const optionalFields = [\n      'profilePhotoUrl',\n      'experienceDescription', \n      'skills',\n      'portfolioImages',\n      'certifications',\n      'idProofUrl',\n      'availabilitySchedule'\n    ];\n\n    let score = 0;\n\n    // Required fields (70% weight)\n    requiredFields.forEach(field => {\n      const value = profile[field as keyof InsertFreelancerProfileForm];\n      if (value && (Array.isArray(value) ? value.length > 0 : value.toString().trim())) {\n        score += 70 / requiredFields.length;\n      }\n    });\n\n    // Optional fields (30% weight) \n    optionalFields.forEach(field => {\n      const value = profile[field as keyof InsertFreelancerProfileForm];\n      if (value && (Array.isArray(value) ? value.length > 0 : value.toString().trim())) {\n        score += 30 / optionalFields.length;\n      }\n    });\n\n    return Math.round(score);\n  };\n\n  const currentProfile = form.watch();\n  const completionScore = calculateProfileCompletion(currentProfile);\n\n  // Field completion status\n  const getFieldStatus = (fieldName: keyof InsertFreelancerProfileForm) => {\n    const value = currentProfile[fieldName];\n    return value && (Array.isArray(value) ? value.length > 0 : value.toString().trim());\n  };\n\n  // Upload handlers\n  const handleGetUploadParameters = async () => {\n    // Mock upload URL for demo - in real app this would call the backend\n    return {\n      method: 'PUT' as const,\n      url: 'https://example.com/upload',\n    };\n  };\n\n  const handleProfilePhotoUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful[0]?.uploadURL) {\n      const photoUrl = result.successful[0].uploadURL;\n      setProfilePhoto(photoUrl);\n      form.setValue('profilePhotoUrl', photoUrl);\n      toast({\n        title: \"Profile photo uploaded\",\n        description: \"Your profile photo has been updated successfully.\",\n      });\n    }\n  };\n\n  const handlePortfolioUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful.length > 0) {\n      const newImages = result.successful.map(file => file.uploadURL || '').filter(Boolean);\n      const updatedImages = [...portfolioImages, ...newImages];\n      setPortfolioImages(updatedImages);\n      form.setValue('portfolioImages', updatedImages);\n      toast({\n        title: \"Portfolio images uploaded\",\n        description: `${newImages.length} image(s) added to your portfolio.`,\n      });\n    }\n  };\n\n  const handleIdProofUpload = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful && result.successful[0]?.uploadURL) {\n      const docUrl = result.successful[0].uploadURL;\n      setIdProofUrl(docUrl);\n      form.setValue('idProofUrl', docUrl);\n      toast({\n        title: \"ID proof uploaded\",\n        description: \"Your ID verification document has been uploaded successfully.\",\n      });\n    }\n  };\n\n  const onSubmit = async (data: InsertFreelancerProfileForm) => {\n    try {\n      // In real app, this would save to the backend\n      console.log('Profile data:', data);\n      toast({\n        title: \"Profile updated\",\n        description: \"Your freelancer profile has been updated successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update profile. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-background\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  const goBack = () => {\n    setLocation('/freelancer');\n  };\n\n  return (\n    <div className=\"min-h-screen pb-20 bg-background text-foreground\">\n      {/* Status Bar */}\n      <div className=\"status-bar\">\n        <span>9:41 AM</span>\n        <div className=\"flex space-x-1\">\n          <i className=\"fas fa-signal\"></i>\n          <i className=\"fas fa-wifi\"></i>\n          <i className=\"fas fa-battery-three-quarters\"></i>\n        </div>\n      </div>\n\n      {/* Header */}\n      <div className=\"bg-gradient-purple text-white p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <div className=\"flex items-center space-x-3\">\n            <button \n              onClick={goBack}\n              className=\"text-white hover:text-purple-200 transition-colors\"\n              data-testid=\"button-back\"\n            >\n              <i className=\"fas fa-arrow-left text-lg\"></i>\n            </button>\n            <h1 className=\"text-xl font-semibold\">Freelancer Profile</h1>\n          </div>\n          <button \n            onClick={handleLogout}\n            className=\"text-white hover:text-purple-200 transition-colors\"\n            data-testid=\"button-logout\"\n          >\n            <i className=\"fas fa-sign-out-alt text-lg\"></i>\n          </button>\n        </div>\n\n        {/* Profile Completion Score */}\n        <div className=\"flex items-center justify-center mb-6\">\n          <div className=\"text-center\">\n            <CircularProgress \n              percentage={completionScore} \n              size={120}\n              className=\"mb-3\"\n            />\n            <h3 className=\"text-lg font-semibold mb-1\">Profile Completion</h3>\n            <p className=\"text-purple-200 text-sm\">\n              {completionScore < 100 ? 'Complete your profile to get more leads!' : 'Your profile is complete!'}\n            </p>\n          </div>\n        </div>\n      </div>\n\n      {/* Profile Content */}\n      <div className=\"p-6 space-y-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            \n            {/* Basic Information Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Star className=\"w-5 h-5 text-yellow-500\" />\n                  Basic Information\n                  {getFieldStatus('professionalTitle') && getFieldStatus('bio') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {/* Profile Photo */}\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"w-20 h-20 rounded-full bg-muted border-2 border-dashed border-border flex items-center justify-center overflow-hidden\">\n                    {profilePhoto ? (\n                      <img src={profilePhoto} alt=\"Profile\" className=\"w-full h-full object-cover\" />\n                    ) : (\n                      <Camera className=\"w-8 h-8 text-muted-foreground\" />\n                    )}\n                  </div>\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium mb-2\">Profile Photo</h4>\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={5485760} // 5MB\n                      onGetUploadParameters={handleGetUploadParameters}\n                      onComplete={handleProfilePhotoUpload}\n                      buttonClassName=\"w-full\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload Photo\n                    </ObjectUploader>\n                  </div>\n                </div>\n\n                {/* Professional Title */}\n                <FormField\n                  control={form.control}\n                  name=\"professionalTitle\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        Professional Title *\n                        {getFieldStatus('professionalTitle') && (\n                          <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., Senior Electrician, Plumber, Carpenter\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Bio */}\n                <FormField\n                  control={form.control}\n                  name=\"bio\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        Professional Bio *\n                        {getFieldStatus('bio') && (\n                          <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Tell potential customers about your expertise and experience...\"\n                          className=\"min-h-[100px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Experience Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Clock className=\"w-5 h-5 text-blue-500\" />\n                  Work Experience\n                  {getFieldStatus('experience') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"experience\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        Years of Experience *\n                        {getFieldStatus('experience') && (\n                          <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., 5\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"experienceDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        Experience Description\n                        {getFieldStatus('experienceDescription') && (\n                          <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Describe your work experience, key projects, and achievements...\"\n                          className=\"min-h-[80px]\"\n                          {...field} \n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </CardContent>\n            </Card>\n\n            {/* Skills & Portfolio Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Award className=\"w-5 h-5 text-purple-500\" />\n                  Skills & Portfolio\n                  {getFieldStatus('skills') && getFieldStatus('portfolioImages') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"flex items-center gap-2 mb-2 text-sm font-medium\">\n                    Skills\n                    {getFieldStatus('skills') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  <div className=\"flex flex-wrap gap-2 mb-2\">\n                    {currentProfile.skills?.map((skill, index) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {skill}\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const newSkills = currentProfile.skills?.filter((_, i) => i !== index) || [];\n                            form.setValue('skills', newSkills);\n                          }}\n                          className=\"ml-2 text-red-400 hover:text-red-600\"\n                        >\n                          ×\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <Input\n                    placeholder=\"Add a skill and press Enter...\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        const input = e.target as HTMLInputElement;\n                        const skill = input.value.trim();\n                        if (skill && !currentProfile.skills?.includes(skill)) {\n                          const newSkills = [...(currentProfile.skills || []), skill];\n                          form.setValue('skills', newSkills);\n                          input.value = '';\n                        }\n                      }\n                    }}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"flex items-center gap-2 mb-2 text-sm font-medium\">\n                    Portfolio Images\n                    {getFieldStatus('portfolioImages') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  <div className=\"grid grid-cols-3 gap-2 mb-4\">\n                    {portfolioImages.map((image, index) => (\n                      <div key={index} className=\"aspect-square bg-muted rounded-lg overflow-hidden relative\">\n                        <img src={image} alt={`Portfolio ${index + 1}`} className=\"w-full h-full object-cover\" />\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const newImages = portfolioImages.filter((_, i) => i !== index);\n                            setPortfolioImages(newImages);\n                            form.setValue('portfolioImages', newImages);\n                          }}\n                          className=\"absolute top-1 right-1 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\"\n                        >\n                          ×\n                        </button>\n                      </div>\n                    ))}\n                  </div>\n                  <ObjectUploader\n                    maxNumberOfFiles={5}\n                    maxFileSize={5485760} // 5MB\n                    onGetUploadParameters={handleGetUploadParameters}\n                    onComplete={handlePortfolioUpload}\n                    buttonClassName=\"w-full\"\n                  >\n                    <Upload className=\"w-4 h-4 mr-2\" />\n                    Add Portfolio Images\n                  </ObjectUploader>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Pricing & Availability Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <DollarSign className=\"w-5 h-5 text-green-500\" />\n                  Pricing & Availability\n                  {getFieldStatus('hourlyRate') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"hourlyRate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel className=\"flex items-center gap-2\">\n                        Hourly Rate / Pricing *\n                        {getFieldStatus('hourlyRate') && (\n                          <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                        )}\n                      </FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"e.g., ₹500-800 per hour\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div>\n                  <label className=\"flex items-center gap-2 mb-3 text-sm font-medium\">\n                    Availability Schedule\n                    {getFieldStatus('availabilitySchedule') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  <div className=\"space-y-2\">\n                    {['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'].map((day) => (\n                      <div key={day} className=\"flex items-center justify-between p-3 border rounded-lg\">\n                        <span className=\"capitalize font-medium\">{day}</span>\n                        <div className=\"flex items-center gap-3\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {(currentProfile.availabilitySchedule as any)?.[day]?.hours || 'Closed'}\n                          </span>\n                          <div className=\"flex items-center gap-2\">\n                            <span className={`w-2 h-2 rounded-full ${\n                              (currentProfile.availabilitySchedule as any)?.[day]?.available \n                                ? 'bg-green-400' : 'bg-red-400'\n                            }`}></span>\n                            <span className=\"text-sm\">\n                              {(currentProfile.availabilitySchedule as any)?.[day]?.available ? 'Available' : 'Closed'}\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Verification & Documents Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Shield className=\"w-5 h-5 text-red-500\" />\n                  Verification & Documents\n                  {getFieldStatus('idProofUrl') && getFieldStatus('certifications') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"flex items-center gap-2 mb-2 text-sm font-medium\">\n                    Certifications & Licenses\n                    {getFieldStatus('certifications') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  <div className=\"flex flex-wrap gap-2 mb-2\">\n                    {currentProfile.certifications?.map((cert, index) => (\n                      <Badge key={index} variant=\"outline\">\n                        <FileText className=\"w-3 h-3 mr-1\" />\n                        {cert}\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const newCerts = currentProfile.certifications?.filter((_, i) => i !== index) || [];\n                            form.setValue('certifications', newCerts);\n                          }}\n                          className=\"ml-2 text-red-400 hover:text-red-600\"\n                        >\n                          ×\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <Input\n                    placeholder=\"Add certification and press Enter...\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        const input = e.target as HTMLInputElement;\n                        const cert = input.value.trim();\n                        if (cert && !currentProfile.certifications?.includes(cert)) {\n                          const newCerts = [...(currentProfile.certifications || []), cert];\n                          form.setValue('certifications', newCerts);\n                          input.value = '';\n                        }\n                      }\n                    }}\n                  />\n                </div>\n\n                <div>\n                  <label className=\"flex items-center gap-2 mb-2 text-sm font-medium\">\n                    ID Proof Document\n                    {getFieldStatus('idProofUrl') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  {idProofUrl ? (\n                    <div className=\"flex items-center gap-3 p-3 border rounded-lg\">\n                      <FileText className=\"w-5 h-5 text-blue-500\" />\n                      <span className=\"flex-1 text-sm\">ID document uploaded</span>\n                      <button\n                        type=\"button\"\n                        onClick={() => {\n                          setIdProofUrl('');\n                          form.setValue('idProofUrl', '');\n                        }}\n                        className=\"text-red-400 hover:text-red-600\"\n                      >\n                        Remove\n                      </button>\n                    </div>\n                  ) : (\n                    <ObjectUploader\n                      maxNumberOfFiles={1}\n                      maxFileSize={10485760} // 10MB\n                      onGetUploadParameters={handleGetUploadParameters}\n                      onComplete={handleIdProofUpload}\n                      buttonClassName=\"w-full\"\n                    >\n                      <Upload className=\"w-4 h-4 mr-2\" />\n                      Upload ID Proof\n                    </ObjectUploader>\n                  )}\n                </div>\n\n                {/* Verification Status */}\n                <div className=\"p-4 bg-muted rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Shield className=\"w-5 h-5 text-green-500\" />\n                    <span className=\"font-medium\">Verification Status</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check-circle mr-1\"></i>\n                      Verified\n                    </Badge>\n                    <span className=\"text-sm text-muted-foreground\">\n                      Your profile has been verified by our team\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Service Areas Card */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5 text-orange-500\" />\n                  Service Areas\n                  {getFieldStatus('workingAreas') && (\n                    <Badge className=\"bg-green-500/10 text-green-400 border-green-500/20\">\n                      <i className=\"fas fa-check w-3 h-3 mr-1\"></i>\n                      Complete\n                    </Badge>\n                  )}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <label className=\"flex items-center gap-2 mb-2 text-sm font-medium\">\n                    Areas You Serve *\n                    {getFieldStatus('workingAreas') && (\n                      <i className=\"fas fa-check text-green-400 text-sm\"></i>\n                    )}\n                  </label>\n                  <div className=\"flex flex-wrap gap-2 mb-2\">\n                    {currentProfile.workingAreas?.map((area, index) => (\n                      <Badge key={index} variant=\"outline\">\n                        <MapPin className=\"w-3 h-3 mr-1\" />\n                        {area}\n                        <button\n                          type=\"button\"\n                          onClick={() => {\n                            const newAreas = currentProfile.workingAreas?.filter((_, i) => i !== index) || [];\n                            form.setValue('workingAreas', newAreas);\n                          }}\n                          className=\"ml-2 text-red-400 hover:text-red-600\"\n                        >\n                          ×\n                        </button>\n                      </Badge>\n                    ))}\n                  </div>\n                  <Input\n                    placeholder=\"Add service area and press Enter...\"\n                    onKeyPress={(e) => {\n                      if (e.key === 'Enter') {\n                        e.preventDefault();\n                        const input = e.target as HTMLInputElement;\n                        const area = input.value.trim();\n                        if (area && !currentProfile.workingAreas?.includes(area)) {\n                          const newAreas = [...(currentProfile.workingAreas || []), area];\n                          form.setValue('workingAreas', newAreas);\n                          input.value = '';\n                        }\n                      }\n                    }}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Save Button */}\n            <div className=\"flex gap-4 pt-6\">\n              <Button \n                type=\"submit\" \n                className=\"flex-1 bg-gradient-purple hover:opacity-90\"\n                data-testid=\"button-save-profile\"\n              >\n                Save Profile\n              </Button>\n              <Button \n                type=\"button\"\n                variant=\"outline\" \n                onClick={goBack}\n                className=\"flex-1\"\n                data-testid=\"button-cancel\"\n              >\n                Back to Dashboard\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </div>\n\n      <Navigation />\n    </div>\n  );\n}","size_bytes":32254}}}